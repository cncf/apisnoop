---
# Source: anchore-engine/charts/postgresql/templates/secrets.yaml

apiVersion: v1
kind: Secret
metadata:
  name: RELEASE-NAME-postgresql
  labels:
    app: postgresql
    chart: postgresql-1.0.0
    release: RELEASE-NAME
    heritage: Tiller
type: Opaque
data:
  
  postgres-password:  "YW5jaG9yZS1wb3N0Z3JlcywxMjM="
  

---
# Source: anchore-engine/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: RELEASE-NAME-anchore-engine
  labels:
    app: RELEASE-NAME-anchore-engine
    chart: "anchore-engine-0.9.0"
    release: "RELEASE-NAME"
    heritage: "Tiller"
type: Opaque
stringData:
  ANCHORE_ADMIN_PASSWORD: "foobar"
  ANCHORE_DB_PASSWORD: "anchore-postgres,123"

---
# Source: anchore-engine/charts/postgresql/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: RELEASE-NAME-postgresql
  labels:
    app: postgresql
    chart: postgresql-1.0.0
    release: RELEASE-NAME
    heritage: Tiller
data:

---
# Source: anchore-engine/templates/engine_configmap.yaml
kind: ConfigMap
apiVersion: v1
metadata:
  name: "RELEASE-NAME-anchore-engine"
  labels:
    app: "RELEASE-NAME-anchore-engine"
    chart: "anchore-engine-0.9.0"
    release: "RELEASE-NAME"
    heritage: "Tiller"
data:
  ANCHORE_DB_NAME: "anchore"
  ANCHORE_DB_USER: "anchoreengine"
  ANCHORE_DB_HOST: "RELEASE-NAME-postgresql:5432"

  config.yaml: |
    # Anchore Service Configuration File from ConfigMap

    service_dir: /anchore_service_config
    tmp_dir: /scratch
    log_level: INFO
    cleanup_images: 

    allow_awsecr_iam_auto: false
    host_id: ${ANCHORE_POD_NAME}
    internal_ssl_verify: false
    auto_restart_services: false

    metrics:
      enabled: false

    # Uncomment if you have a local endpoint that can accept
    # notifications from the anchore-engine, as configured below
    #
    

    # Configure what feeds to sync. The 'admin' anchoreIO credentials are used if present, but not required.
    # The 'anonymous' user is used for the sync otherwise.
    # The sync will hit http://ancho.re/feeds, if any outbound firewall config needs to be set in your environment.
    feeds:
      sync_enabled: true
      selective_sync:
        # If enabled only sync specific feeds instead of all that are found.
        enabled: true
        feeds:
          # Vulnerabilities feed is the feed for distro cve sources (redhat, debian, ubuntu, oracle, alpine....)
          vulnerabilities: true
          # NVD Data is used for non-distro CVEs (jars, npm, etc) that are not packaged and released by distros as rpms, debs, etc
          nvd: true
          # Warning: enabling the package sync causes the service to require much
          #   more memory to do process the significant data volume. We recommend at least 4GB available for the container
          packages: false
          # Enabling snyk syncs snyk vulnerability data from an on-premise anchore enterprise feeds service. Please contact
          # anchore support for finding out more about this service
          snyk: false
      client_url: 'https://ancho.re/v1/account/users'
      token_url: 'https://ancho.re/oauth/token'
      anonymous_user_username: anon@ancho.re
      anonymous_user_password: pbiU2RYZ2XrmYQ
      connection_timeout_seconds: 3
      read_timeout_seconds: 60

    default_admin_password: ${ANCHORE_ADMIN_PASSWORD}
    default_admin_email: example@email.com

    credentials:
      database:
        db_connect: 'postgresql+pg8000://${ANCHORE_DB_USER}:${ANCHORE_DB_PASSWORD}@${ANCHORE_DB_HOST}/${ANCHORE_DB_NAME}'
        db_connect_args:
          timeout: 120
          ssl: false
        db_pool_size: 30
        db_pool_max_overflow: 30

    services:
      apiext:
        enabled: true
        require_auth: true
        endpoint_hostname: RELEASE-NAME-anchore-engine-api
        listen: '0.0.0.0'
        port: 8228
        ssl_enable: false
        ssl_cert: /certs/tls.crt
        ssl_key: /certs/tls.key
      analyzer:
        enabled: true
        require_auth: true
        endpoint_hostname: RELEASE-NAME-anchore-engine-analyzer
        listen: '0.0.0.0'
        port: 8084
        cycle_timer_seconds: 1
        cycle_timers:
          image_analyzer: 5
          
        max_threads: 1
        analyzer_driver: 'nodocker'
        ssl_cert: /certs/tls.crt
        ssl_key: /certs/tls.key
        ssl_enable: false
      catalog:
        enabled: true
        require_auth: true
        endpoint_hostname: RELEASE-NAME-anchore-engine-catalog
        listen: '0.0.0.0'
        port: 8082
        cycle_timer_seconds: '1'
        cycle_timers:
          analyzer_queue: 1
          image_watcher: 3600
          notifications: 30
          policy_eval: 3600
          repo_watcher: 60
          service_watcher: 15
          vulnerability_scan: 14400
          
        ssl_enable: false
        ssl_cert: /certs/tls.crt
        ssl_key: /certs/tls.key
        event_log:
          notification:
            enabled: true
            level:
            - error
          
        archive:
          compression:
            enabled: true
            min_size_kbytes: 100
          storage_driver:
            config: {}
            name: db
          
      simplequeue:
        enabled: true
        require_auth: true
        endpoint_hostname: RELEASE-NAME-anchore-engine-simplequeue
        listen: '0.0.0.0'
        port: 8083
        ssl_enable: false
        ssl_cert: /certs/tls.crt
        ssl_key: /certs/tls.key
      policy_engine:
        enabled: true
        require_auth: true
        endpoint_hostname: RELEASE-NAME-anchore-engine-policy
        listen: '0.0.0.0'
        port: 8087
        cycle_timer_seconds: 1
        cycle_timers:
          feed_sync: 14400
          feed_sync_checker: 3600
          
        ssl_cert: /certs/tls.crt
        ssl_key: /certs/tls.key
        ssl_enable: false

---
# Source: anchore-engine/charts/postgresql/templates/pvc.yaml
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: RELEASE-NAME-postgresql
  labels:
    app: postgresql
    chart: postgresql-1.0.0
    release: RELEASE-NAME
    heritage: Tiller
  annotations:
    "helm.sh/resource-policy": 
spec:
  accessModes:
    - "ReadWriteOnce"
  resources:
    requests:
      storage: "8Gi"
---
# Source: anchore-engine/charts/postgresql/templates/svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: RELEASE-NAME-postgresql
  labels:
    app: postgresql
    chart: postgresql-1.0.0
    release: RELEASE-NAME
    heritage: Tiller
spec:
  type: ClusterIP
  ports:
  - name: postgresql
    port: 5432
    targetPort: postgresql
  selector:
    app: postgresql
    release: RELEASE-NAME

---
# Source: anchore-engine/charts/postgresql/templates/deployment.yaml
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: RELEASE-NAME-postgresql
  labels:
    app: postgresql
    chart: postgresql-1.0.0
    release: RELEASE-NAME
    heritage: Tiller
spec:
  selector:
    matchLabels:
      app: postgresql
      release: RELEASE-NAME
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: postgresql
        release: RELEASE-NAME
    spec:
      containers:
      - name: RELEASE-NAME-postgresql
        image: "postgres:9.6.2"
        imagePullPolicy: ""
        args:
        env:
        - name: POSTGRES_USER
          value: "anchoreengine"
          # Required for pg_isready in the health probes.
        - name: PGUSER
          value: "anchoreengine"
        - name: POSTGRES_DB
          value: "anchore"
        - name: POSTGRES_INITDB_ARGS
          value: ""
        - name: PGDATA
          value: /var/lib/postgresql/data/pgdata
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: RELEASE-NAME-postgresql
              key: postgres-password
        - name: POD_IP
          valueFrom: { fieldRef: { fieldPath: status.podIP } }
        ports:
        - name: postgresql
          containerPort: 5432
        livenessProbe:
          exec:
            command:
            - sh
            - -c
            - exec pg_isready --host $POD_IP
          initialDelaySeconds: 60
          timeoutSeconds: 5
          failureThreshold: 6
        readinessProbe:
          exec:
            command:
            - sh
            - -c
            - exec pg_isready --host $POD_IP
          initialDelaySeconds: 5
          timeoutSeconds: 3
          periodSeconds: 5
        resources:
          requests:
            cpu: 100m
            memory: 256Mi
          
        volumeMounts:
        - name: data
          mountPath: /var/lib/postgresql/data/pgdata
          subPath: postgresql-db
      volumes:
      - name: data
        persistentVolumeClaim:
          claimName: RELEASE-NAME-postgresql

---
# Source: anchore-engine/templates/analyzer_deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: "RELEASE-NAME-anchore-engine-analyzer"
  labels:
    app: "RELEASE-NAME-anchore-engine"
    chart: "anchore-engine-0.9.0"
    release: "RELEASE-NAME"
    heritage: "Tiller"
    component: analyzer
spec:
  selector:
    matchLabels:
      app: "RELEASE-NAME-anchore-engine"
      component: analyzer
  replicas: 1
  template:
    metadata:
      labels:
        app: "RELEASE-NAME-anchore-engine"
        component: analyzer
    spec:
      containers:
      - name: anchore-engine-analyzer
        image: docker.io/anchore/anchore-engine:v0.3.0
        imagePullPolicy: IfNotPresent
        command: ["/usr/local/bin/anchore-manager"]
        args: ["service", "start", "analyzer"]
        envFrom:
        - secretRef:
            name: RELEASE-NAME-anchore-engine
        - configMapRef:
            name: RELEASE-NAME-anchore-engine
        env:
        - name: ANCHORE_POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        ports:
        - name: analyzer-api
          containerPort: 8084
        volumeMounts:
        - name: config-volume
          mountPath: /config/config.yaml
          subPath: config.yaml
        - name: analysis-scratch
          mountPath: /scratch
        livenessProbe:
          httpGet:
            path: /health
            port: analyzer-api
          initialDelaySeconds: 10
          periodSeconds: 60
          failureThreshold: 5
        readinessProbe:
          httpGet:
            path: /health
            port: analyzer-api
          initialDelaySeconds: 5
          periodSeconds: 10
          timeoutSeconds: 10
          failureThreshold: 10
        resources:
          null
          
      volumes:
        - name: config-volume
          configMap:
            name: RELEASE-NAME-anchore-engine
        - name: analysis-scratch
          emptyDir: {}
          

---
# Source: anchore-engine/templates/api_deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: "RELEASE-NAME-anchore-engine-api"
  labels:
    app: "RELEASE-NAME-anchore-engine"
    component: api
    chart: "anchore-engine-0.9.0"
    release: "RELEASE-NAME"
    heritage: "Tiller"
spec:
  selector:
    matchLabels:
      app: "RELEASE-NAME-anchore-engine"
      component: api
  replicas: 1
  template:
    metadata:
      labels:
        app: "RELEASE-NAME-anchore-engine"
        component: api
    spec:
      volumes:
        - name: config-volume
          configMap:
            name: RELEASE-NAME-anchore-engine
      containers:
      - name: anchore-engine-api
        image: docker.io/anchore/anchore-engine:v0.3.0
        imagePullPolicy: IfNotPresent
        command: ["/usr/local/bin/anchore-manager"]
        args: ["service", "start", "apiext"]
        envFrom:
        - secretRef:
            name: RELEASE-NAME-anchore-engine
        - configMapRef:
            name: RELEASE-NAME-anchore-engine
        env:
        - name: ANCHORE_POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        ports:
        - containerPort: 8228
          name: external-api
        volumeMounts:
        - name: config-volume
          mountPath: /config/config.yaml
          subPath: config.yaml
        readinessProbe:
          httpGet:
            path: /health
            port: external-api
          initialDelaySeconds: 60
          periodSeconds: 10
          timeoutSeconds: 10
          failureThreshold: 10
        livenessProbe:
          httpGet:
            path: /health
            port: external-api
          timeoutSeconds: 10
          initialDelaySeconds: 60
          periodSeconds: 30
          failureThreshold: 10
        resources:
          null
          

---
apiVersion: v1
kind: Service
metadata:
  name: RELEASE-NAME-anchore-engine-api
  labels:
    app: RELEASE-NAME-anchore-engine
    chart: anchore-engine-0.9.0
    release: RELEASE-NAME
    heritage: Tiller
    component: api
spec:
  type: ClusterIP
  ports:
    - name: anchore-external-api
      port: 8228
      targetPort: 8228
      protocol: TCP
  selector:
    app: RELEASE-NAME-anchore-engine
    component: api

---
# Source: anchore-engine/templates/catalog_deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: "RELEASE-NAME-anchore-engine-catalog"
  labels:
    app: "RELEASE-NAME-anchore-engine"
    chart: "anchore-engine-0.9.0"
    release: "RELEASE-NAME"
    heritage: "Tiller"
    component: catalog
spec:
  selector:
    matchLabels:
      app: "RELEASE-NAME-anchore-engine"
      component: catalog
  replicas: 1
  template:
    metadata:
      labels:
        app: "RELEASE-NAME-anchore-engine"
        component: catalog
    spec:
      containers:
      - name: anchore-engine-catalog
        image: docker.io/anchore/anchore-engine:v0.3.0
        imagePullPolicy: IfNotPresent
        command: ["/usr/local/bin/anchore-manager"]
        args: ["service", "start", "catalog"]
        envFrom:
        - secretRef:
            name: RELEASE-NAME-anchore-engine
        - configMapRef:
            name: RELEASE-NAME-anchore-engine
        env:
        - name: ANCHORE_POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        ports:
        - name: catalog
          containerPort: 8082
        volumeMounts:
        - name: config-volume
          mountPath: /config/config.yaml
          subPath: config.yaml
        livenessProbe:
          httpGet:
            path: /health
            port: catalog
          initialDelaySeconds: 10
          periodSeconds: 60
          failureThreshold: 5
        readinessProbe:
          httpGet:
            path: /health
            port: catalog
          initialDelaySeconds: 5
          periodSeconds: 10
          timeoutSeconds: 10
          failureThreshold: 10
        resources:
          null
          
      volumes:
        - name: config-volume
          configMap:
            name: RELEASE-NAME-anchore-engine

---
apiVersion: v1
kind: Service
metadata:
  name: RELEASE-NAME-anchore-engine-catalog
  labels:
    app: RELEASE-NAME-anchore-engine
    chart: anchore-engine-0.9.0
    release: RELEASE-NAME
    heritage: Tiller
    component: catalog
spec:
  type: ClusterIP
  ports:
    - name: anchore-catalog-api
      port: 8082
      targetPort: 8082
      protocol: TCP
  selector:
    app: RELEASE-NAME-anchore-engine
    component: catalog

---
# Source: anchore-engine/templates/policy_engine_deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: "RELEASE-NAME-anchore-engine-policy"
  labels:
    app: "RELEASE-NAME-anchore-engine"
    chart: "anchore-engine-0.9.0"
    release: "RELEASE-NAME"
    heritage: "Tiller"
    component: policy
spec:
  selector:
    matchLabels:
      app: "RELEASE-NAME-anchore-engine"
      component: policy
  replicas: 1
  template:
    metadata:
      labels:
        app: "RELEASE-NAME-anchore-engine"
        component: policy
    spec:
      containers:
      - name: anchore-engine-policy
        image: docker.io/anchore/anchore-engine:v0.3.0
        imagePullPolicy: IfNotPresent
        command: ["/usr/local/bin/anchore-manager"]
        args: ["service", "start", "policy_engine"]
        envFrom:
        - secretRef:
            name: RELEASE-NAME-anchore-engine
        - configMapRef:
            name: RELEASE-NAME-anchore-engine
        env:
        - name: ANCHORE_POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        ports:
        - name: policy
          containerPort: 8087
        volumeMounts:
        - name: config-volume
          mountPath: /config/config.yaml
          subPath: config.yaml
        livenessProbe:
          exec:
            command:
            - pgrep
            - twistd
          initialDelaySeconds: 10
          periodSeconds: 60
          failureThreshold: 5
        readinessProbe:
          httpGet:
            path: /health
            port: policy
          initialDelaySeconds: 5
          periodSeconds: 10
          timeoutSeconds: 10
          failureThreshold: 10
        resources:
          null
          
      volumes:
        - name: config-volume
          configMap:
            name: RELEASE-NAME-anchore-engine

---
apiVersion: v1
kind: Service
metadata:
  name: RELEASE-NAME-anchore-engine-policy
  labels:
    app: RELEASE-NAME-anchore-engine
    chart: anchore-engine-0.9.0
    release: RELEASE-NAME
    heritage: Tiller
    component: policy
spec:
  type: ClusterIP
  ports:
    - name: anchore-policy-api
      port: 8087
      targetPort: 8087
      protocol: TCP
  selector:
    app: RELEASE-NAME-anchore-engine
    component: policy

---
# Source: anchore-engine/templates/simplequeue_deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: "RELEASE-NAME-anchore-engine-simplequeue"
  labels:
    app: "RELEASE-NAME-anchore-engine"
    chart: "anchore-engine-0.9.0"
    release: "RELEASE-NAME"
    heritage: "Tiller"
    component: simplequeue
spec:
  selector:
    matchLabels:
      app: "RELEASE-NAME-anchore-engine"
      component: simplequeue
  replicas: 1
  template:
    metadata:
      labels:
        app: "RELEASE-NAME-anchore-engine"
        component: simplequeue
    spec:
      containers:
      - name: anchore-engine-simplequeue
        image: docker.io/anchore/anchore-engine:v0.3.0
        imagePullPolicy: IfNotPresent
        command: ["/usr/local/bin/anchore-manager"]
        args: ["service", "start", "simplequeue"]
        envFrom:
        - secretRef:
            name: RELEASE-NAME-anchore-engine
        - configMapRef:
            name: RELEASE-NAME-anchore-engine
        env:
        - name: ANCHORE_POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        ports:
        - name: simplequeue
          containerPort: 8083
        volumeMounts:
        - name: config-volume
          mountPath: /config/config.yaml
          subPath: config.yaml
        livenessProbe:
          httpGet:
            path: /health
            port: simplequeue
          initialDelaySeconds: 10
          periodSeconds: 60
          failureThreshold: 5
        readinessProbe:
          httpGet:
            path: /health
            port: simplequeue
          initialDelaySeconds: 5
          periodSeconds: 10
          timeoutSeconds: 10
          failureThreshold: 10
        resources:
          null
          
      volumes:
        - name: config-volume
          configMap:
            name: RELEASE-NAME-anchore-engine

---
apiVersion: v1
kind: Service
metadata:
  name: RELEASE-NAME-anchore-engine-simplequeue
  labels:
    app: RELEASE-NAME-anchore-engine
    chart: anchore-engine-0.9.0
    release: RELEASE-NAME
    heritage: Tiller
    component: simplequeue
spec:
  type: ClusterIP
  ports:
    - name: anchore-simplequeue-api
      port: 8083
      targetPort: 8083
      protocol: TCP
  selector:
    app: RELEASE-NAME-anchore-engine
    component: simplequeue

---
# Source: anchore-engine/charts/postgresql/templates/networkpolicy.yaml


---
# Source: anchore-engine/templates/enterprise_feeds_deployment.yaml

---
# Source: anchore-engine/templates/enterprise_ui_deployment.yaml

---
# Source: anchore-engine/templates/feeds_configmap.yaml

---
# Source: anchore-engine/templates/ingress.yaml

---
# Source: anchore-engine/templates/rbac_configmap.yaml


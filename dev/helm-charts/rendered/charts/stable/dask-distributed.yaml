---
# Source: dask-distributed/templates/dask-jupyter-config.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: RELEASE-NAME-jupyter-config
  labels:
    app: dask-distributed
    heritage: "Tiller"
    release: "RELEASE-NAME"
    chart: "dask-distributed-2.0.2"
    component: "RELEASE-NAME-jupyter-notebook"
data:
  jupyter_notebook_config.py: |
    c = get_config()
    c.NotebookApp.password = 'sha1:aae8550c0a44:9507d45e087d5ee481a5ce9f4f16f37a0867318c'

---
# Source: dask-distributed/templates/dask-jupyter-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: RELEASE-NAME-jupyter
  labels:
    app: dask-distributed
    heritage: "Tiller"
    release: "RELEASE-NAME"
    chart: "dask-distributed-2.0.2"
    component: "RELEASE-NAME-jupyter-notebook"
spec:
  ports:
    - port: 80
      targetPort: 8888
  selector:
    app: dask-distributed
    release: "RELEASE-NAME"
    component: "RELEASE-NAME-jupyter-notebook"
  type: LoadBalancer

---
# Source: dask-distributed/templates/dask-scheduler-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: RELEASE-NAME-scheduler
  labels:
    app: dask-distributed
    heritage: "Tiller"
    release: "RELEASE-NAME"
    chart: "dask-distributed-2.0.2"
    component: "RELEASE-NAME-dask-scheduler"
spec:
  ports:
    - name: RELEASE-NAME-scheduler
      port: 8786
      targetPort: 8786
    - name: RELEASE-NAME-webui
      port: 80
      targetPort: 8787
  selector:
    app: dask-distributed
    release: "RELEASE-NAME"
    component: "RELEASE-NAME-dask-scheduler"
  type: LoadBalancer

---
# Source: dask-distributed/templates/dask-jupyter-deployment.yaml
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: RELEASE-NAME-jupyter
  labels:
    app: dask-distributed
    heritage: "Tiller"
    release: "RELEASE-NAME"
    chart: "dask-distributed-2.0.2"
    component: "RELEASE-NAME-jupyter-notebook"
spec:
  replicas: 1
  strategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: dask-distributed
        release: "RELEASE-NAME"
        component: "RELEASE-NAME-jupyter-notebook"
    spec:
      containers:
        - name: RELEASE-NAME-jupyter
          image: "jupyter/base-notebook:11be019e4079"
          ports:
            - containerPort: 8888
          resources:
            {}
            
          volumeMounts:
          - name: config-volume
            mountPath: /home/jovyan/.jupyter
      volumes:
      - name: config-volume
        configMap:
          name: RELEASE-NAME-jupyter-config

---
# Source: dask-distributed/templates/dask-scheduler-deployment.yaml
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: RELEASE-NAME-scheduler
  labels:
    app: dask-distributed
    heritage: "Tiller"
    release: "RELEASE-NAME"
    chart: "dask-distributed-2.0.2"
    component: "RELEASE-NAME-dask-scheduler"
spec:
  replicas: 1
  strategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: dask-distributed
        release: "RELEASE-NAME"
        component: "RELEASE-NAME-dask-scheduler"
    spec:
      containers:
        - name: RELEASE-NAME-scheduler
          image: "daskdev/dask:latest"
          command: ["dask-scheduler", "--port", "8786", "--bokeh-port", "8787"]
          ports:
            - containerPort: 8786
            - containerPort: 8787
          resources:
            {}
            

---
# Source: dask-distributed/templates/dask-worker-deployment.yaml
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: RELEASE-NAME-worker
  labels:
    app: dask-distributed
    heritage: "Tiller"
    release: "RELEASE-NAME"
    chart: "dask-distributed-2.0.2"
    component: "RELEASE-NAME-dask-worker"
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: dask-distributed
        release: "RELEASE-NAME"
        component: "RELEASE-NAME-dask-worker"
    spec:
      containers:
        - name: RELEASE-NAME-worker
          image: "daskdev/dask:latest"
          command: ["dask-worker", "RELEASE-NAME-scheduler:8786"]
          ports:
            - containerPort: 8081
          resources:
            {}
            


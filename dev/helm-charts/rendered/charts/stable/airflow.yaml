---
# Source: airflow/charts/postgresql/templates/secrets.yaml

apiVersion: v1
kind: Secret
metadata:
  name: RELEASE-NAME-postgresql
  labels:
    app: postgresql
    chart: postgresql-0.13.1
    release: RELEASE-NAME
    heritage: Tiller
type: Opaque
data:
  
  postgres-password:  "YWlyZmxvdw=="
  

---
# Source: airflow/charts/redis/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: RELEASE-NAME-redis
  labels:
    app: redis
    chart: redis-3.3.5
    release: "RELEASE-NAME"
    heritage: "Tiller"
type: Opaque
data:
  redis-password: "YWlyZmxvdw=="
---
# Source: airflow/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: RELEASE-NAME
  labels:
    app: RELEASE-NAME
    chart: "airflow-0.9.0"
    release: "RELEASE-NAME"
    heritage: "Tiller"
type: Opaque
data:
  postgresUser: "cG9zdGdyZXM="
  postgresPassword: "YWlyZmxvdw=="
  redisPassword: "YWlyZmxvdw=="

---
# Source: airflow/charts/postgresql/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: RELEASE-NAME-postgresql
  labels:
    app: postgresql
    chart: postgresql-0.13.1
    release: RELEASE-NAME
    heritage: Tiller
data:
---
# Source: airflow/templates/configmap-airflow.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: "RELEASE-NAME-env"
  labels:
    app: airflow
    chart: airflow-0.9.0
    release: RELEASE-NAME
    heritage: Tiller
data:
  ## Force UTC timezone
  TZ: Etc/UTC
  ## Postgres DB configuration
  POSTGRES_HOST: "RELEASE-NAME-postgresql"
  POSTGRES_PORT: "5432"
  POSTGRES_DB: "airflow"
  ## Redis DB configuration
  REDIS_HOST: "RELEASE-NAME-redis-master"
  REDIS_PORT: "6379"
  ## Flower PORT
  FLOWER_PORT: "5555"
  # Configure puckel's docker-airflow entrypoint
  EXECUTOR: "Celery"
  FERNET_KEY: ""
  DO_WAIT_INITDB: "false"
  ## Custom Airflow settings
  AIRFLOW__CORE__DONOT_PICKLE: "false"
  AIRFLOW__CELERY__FLOWER_URL_PREFIX: ""
  AIRFLOW__CELERY__WORKER_CONCURRENCY: "1"
  AIRFLOW__CORE__DAGS_FOLDER: "/usr/local/airflow/dags"
  AIRFLOW__WEBSERVER__BASE_URL: "http://localhost:8080"
  # Disabling XCom pickling for forward compatibility
  AIRFLOW__CODE__ENABLE_XCOM_PICKLING: "false"
  # For backwards compat with AF < 1.10, CELERY_CONCURRENCY got renamed to WORKER_CONCURRENCY
  AIRFLOW__CELERY__CELERY_CONCURRENCY: "1"
  # Note: changing `Values.airflow.config` won't change the configmap checksum and so won't make
  # the pods to restart

---
# Source: airflow/templates/configmap-git-clone.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: RELEASE-NAME-git-clone
  labels:
    app: airflow
    chart: airflow-0.9.0
    release: RELEASE-NAME
    heritage: Tiller
data:
  git-clone.sh: |
    #!/bin/sh -e
    REPO=$1
    REF=$2
    DIR=$3
    # Init Containers will re-run on Pod restart. Remove the directory's contents
    # and reprovision when this happens.
    if [ -d "$DIR" ]; then
        rm -rf $( find $DIR -mindepth 1 )
    fi
    git clone $REPO $DIR
    cd $DIR
    git reset --hard $REF

---
# Source: airflow/templates/configmap-scripts.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: RELEASE-NAME-scripts
  labels:
    app: airflow
    chart: airflow-0.9.0
    release: RELEASE-NAME
    heritage: Tiller
data:
  install-requirements.sh: |
    #!/bin/sh -e
    if [ ! -d /usr/local/airflow/dags ]; then
      echo "No folder /usr/local/airflow/dags"
      exit 0
    fi
    cd /usr/local/airflow/dags
    if [ -f requirements.txt ]; then
      pip install --user -r requirements.txt
    else
      exit 0
    fi

---
# Source: airflow/charts/postgresql/templates/pvc.yaml
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: RELEASE-NAME-postgresql
  labels:
    app: postgresql
    chart: postgresql-0.13.1
    release: RELEASE-NAME
    heritage: Tiller
spec:
  accessModes:
    - "ReadWriteOnce"
  resources:
    requests:
      storage: "8Gi"
---
# Source: airflow/templates/service-account.yaml

apiVersion: v1
kind: ServiceAccount
metadata:
  name: RELEASE-NAME
  labels:
    app: airflow
    chart: airflow-0.9.0
    release: RELEASE-NAME
    heritage: Tiller

---
# Source: airflow/templates/role.yaml

apiVersion: rbac.authorization.k8s.io/v1beta1
kind: Role
metadata:
  name: RELEASE-NAME
  labels:
    app: airflow
    chart: airflow-0.9.0
    release: RELEASE-NAME
    heritage: Tiller
rules:
- apiGroups: [""]
  resources:
  - pods
  verbs: ["create", "get", "delete", "list", "watch"]
- apiGroups: [""]
  resources:
  - "pods/log"
  verbs: ["get", "list"]

---
# Source: airflow/templates/role-binding.yaml

apiVersion: rbac.authorization.k8s.io/v1beta1
kind: RoleBinding
metadata:
  name: RELEASE-NAME
  labels:
    app: airflow
    chart: airflow-0.9.0
    release: RELEASE-NAME
    heritage: Tiller
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: RELEASE-NAME
subjects:
- kind: ServiceAccount
  name: RELEASE-NAME
  namespace: hub

---
# Source: airflow/charts/postgresql/templates/svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: RELEASE-NAME-postgresql
  labels:
    app: postgresql
    chart: postgresql-0.13.1
    release: RELEASE-NAME
    heritage: Tiller
spec:
  type: ClusterIP
  ports:
  - name: postgresql
    port: 5432
    targetPort: postgresql
  selector:
    app: postgresql
    release: RELEASE-NAME

---
# Source: airflow/charts/redis/templates/redis-master-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: RELEASE-NAME-redis-master
  labels:
    app: redis
    chart: redis-3.3.5
    release: "RELEASE-NAME"
    heritage: "Tiller"
  annotations:
spec:
  type: ClusterIP
  ports:
  - name: redis
    port: 6379
    targetPort: redis
  selector:
    app: redis
    release: "RELEASE-NAME"

---
# Source: airflow/templates/service-flower.yaml
apiVersion: v1
kind: Service
metadata:
  name: RELEASE-NAME-flower
  labels:
    app: airflow
    component: flower
    chart: airflow-0.9.0
    release: RELEASE-NAME
    heritage: Tiller
spec:
  type: ClusterIP
  selector:
    app: airflow
    component: flower
    release: RELEASE-NAME
  ports:
    - name: flower
      protocol: TCP
      port: 5555

---
# Source: airflow/templates/service-web.yaml
apiVersion: v1
kind: Service
metadata:
  name: RELEASE-NAME-web
  labels:
    app: airflow
    component: web
    chart: airflow-0.9.0
    release: RELEASE-NAME
    heritage: Tiller
spec:
  type: ClusterIP
  selector:
    app: airflow
    component: web
    release: RELEASE-NAME
  ports:
    - name: web
      protocol: TCP
      port: 8080

---
# Source: airflow/templates/service-worker.yaml
# Headless service for stable DNS entries of StatefulSet members.
apiVersion: v1
kind: Service
metadata:
  name: RELEASE-NAME-worker
  labels:
    app: airflow
    component: worker
    chart: airflow-0.9.0
    release: RELEASE-NAME
    heritage: Tiller
spec:
  ports:
    - name: worker
      protocol: TCP
      port: 8793
  clusterIP: None
  selector:
    app: airflow
    component: worker

---
# Source: airflow/charts/postgresql/templates/deployment.yaml
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: RELEASE-NAME-postgresql
  labels:
    app: postgresql
    chart: postgresql-0.13.1
    release: RELEASE-NAME
    heritage: Tiller
spec:
  template:
  selector:
    matchLabels:
      app: postgresql
      release: RELEASE-NAME
  template:
    metadata:
      labels:
        app: postgresql
        release: RELEASE-NAME
    spec:
      containers:
      - name: RELEASE-NAME-postgresql
        image: "postgres:9.6.2"
        imagePullPolicy: ""
        args:
        env:
        - name: POSTGRES_USER
          value: "postgres"
          # Required for pg_isready in the health probes.
        - name: PGUSER
          value: "postgres"
        - name: POSTGRES_DB
          value: "airflow"
        - name: POSTGRES_INITDB_ARGS
          value: ""
        - name: PGDATA
          value: /var/lib/postgresql/data/pgdata
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: RELEASE-NAME-postgresql
              key: postgres-password
        - name: POD_IP
          valueFrom: { fieldRef: { fieldPath: status.podIP } }
        ports:
        - name: postgresql
          containerPort: 5432
        livenessProbe:
          exec:
            command:
            - sh
            - -c
            - exec pg_isready --host $POD_IP
          initialDelaySeconds: 120
          timeoutSeconds: 5
          failureThreshold: 6
        readinessProbe:
          exec:
            command:
            - sh
            - -c
            - exec pg_isready --host $POD_IP
          initialDelaySeconds: 5
          timeoutSeconds: 3
          periodSeconds: 5
        resources:
          requests:
            cpu: 100m
            memory: 256Mi
          
        volumeMounts:
        - name: data
          mountPath: /var/lib/postgresql/data/pgdata
          subPath: postgresql-db
      volumes:
      - name: data
        persistentVolumeClaim:
          claimName: RELEASE-NAME-postgresql

---
# Source: airflow/templates/deployments-flower.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: RELEASE-NAME-flower
  labels:
    app: airflow
    component: flower
    chart: airflow-0.9.0
    release: RELEASE-NAME
    heritage: Tiller
spec:
  replicas: 1
  minReadySeconds: 10
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app: airflow
      component: flower
      release: RELEASE-NAME
  template:
    metadata:
      annotations:
        checksum/config: 4a2c6e4eb2abc68f0a3e68e6e75acaec35c118da839b4bd7dcf1a3b95bee9661
        configmap.fabric8.io/update-on-change: "RELEASE-NAME-env"
      labels:
        app: airflow
        component: flower
        release: RELEASE-NAME
    spec:
      restartPolicy: Always
      containers:
        - name: airflow-flower
          image: puckel/docker-airflow:1.10.0-4
          imagePullPolicy: IfNotPresent
          envFrom:
            - configMapRef:
                name: "RELEASE-NAME-env"
          env:
            - name: POSTGRES_USER
              valueFrom:
                secretKeyRef:
                  name: RELEASE-NAME
                  key: postgresUser
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: RELEASE-NAME
                  key: postgresPassword
            - name: REDIS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: RELEASE-NAME
                  key: redisPassword
          ports:
            - name: flower
              containerPort: 5555
              protocol: TCP
          args: ["flower"]
          livenessProbe:
            httpGet:
              path: "//"
              port: flower
            initialDelaySeconds: 60
            periodSeconds: 60
            timeoutSeconds: 1
            successThreshold: 1
            failureThreshold: 5

---
# Source: airflow/templates/deployments-scheduler.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: RELEASE-NAME-scheduler
  labels:
    app: airflow
    component: scheduler
    chart: airflow-0.9.0
    release: RELEASE-NAME
    heritage: Tiller
spec:
  replicas: 1
  strategy:
    # Kill the scheduler as soon as possible. It will restart quickly with all the workers,
    # minimizing the time they are not synchronized.
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 0
      maxUnavailable: 100%
  selector:
    matchLabels:
      app: airflow
      component: scheduler
      release: RELEASE-NAME
  template:
    metadata:
      annotations:
        checksum/config: 4a2c6e4eb2abc68f0a3e68e6e75acaec35c118da839b4bd7dcf1a3b95bee9661
        configmap.fabric8.io/update-on-change: "RELEASE-NAME-env"
      labels:
        app: airflow
        component: scheduler
        release: RELEASE-NAME
    spec:
      restartPolicy: Always
      serviceAccountName: RELEASE-NAME
      containers:
        - name: airflow-scheduler
          image: puckel/docker-airflow:1.10.0-4
          imagePullPolicy: IfNotPresent
          envFrom:
          - configMapRef:
              name: "RELEASE-NAME-env"
          env:
            - name: POSTGRES_USER
              valueFrom:
                secretKeyRef:
                  name: RELEASE-NAME
                  key: postgresUser
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: RELEASE-NAME
                  key: postgresPassword
            - name: REDIS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: RELEASE-NAME
                  key: redisPassword
          volumeMounts:
          args:
            - "bash"
            - "-c"
            - >
              echo 'waiting 10s...' &&
              sleep 10 &&
              mkdir -p /usr/local/airflow/.local/bin &&
              export PATH=/usr/local/airflow/.local/bin:$PATH &&
              echo "executing initdb" &&
              airflow initdb &&
              echo "executing scheduler" &&
              airflow scheduler -n -1
      volumes:
        - name: dags-data
          emptyDir: {}

---
# Source: airflow/templates/deployments-web.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: RELEASE-NAME-web
  labels:
    app: airflow
    component: web
    chart: airflow-0.9.0
    release: RELEASE-NAME
    heritage: Tiller
spec:
  replicas: 1
  minReadySeconds: 120
  strategy:
    # Smooth rolling update of the Web UI
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app: airflow
      component: web
      release: RELEASE-NAME
  template:
    metadata:
      annotations:
        checksum/config: 4a2c6e4eb2abc68f0a3e68e6e75acaec35c118da839b4bd7dcf1a3b95bee9661
        configmap.fabric8.io/update-on-change: "RELEASE-NAME-env"
      labels:
        app: airflow
        component: web
        release: RELEASE-NAME
    spec:
      restartPolicy: Always
      containers:
        - name: airflow-web
          image: puckel/docker-airflow:1.10.0-4
          imagePullPolicy: IfNotPresent
          ports:
            - name: web
              containerPort: 8080
              protocol: TCP
          envFrom:
            - configMapRef:
                name: "RELEASE-NAME-env"
          env:
            - name: POSTGRES_USER
              valueFrom:
                secretKeyRef:
                  name: RELEASE-NAME
                  key: postgresUser
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: RELEASE-NAME
                  key: postgresPassword
            - name: REDIS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: RELEASE-NAME
                  key: redisPassword
          volumeMounts:
          args:
            - "bash"
            - "-c"
            - >
              echo 'waiting 60s...' &&
              sleep 60 &&
              mkdir -p /usr/local/airflow/.local/bin &&
              export PATH=/usr/local/airflow/.local/bin:$PATH &&
              echo 'executing webserver...' &&
              airflow webserver
          livenessProbe:
            httpGet:
              path: "/health"
              port: web
            ## Keep 6 minutes the delay to allow clean wait of postgres and redis containers
            initialDelaySeconds: 360
            periodSeconds: 60
            timeoutSeconds: 1
            successThreshold: 1
            failureThreshold: 5
      volumes:
        - name: dags-data
          emptyDir: {}

---
# Source: airflow/charts/redis/templates/redis-master-statefulset.yaml
apiVersion: apps/v1beta2
kind: StatefulSet
metadata:
  name: RELEASE-NAME-redis-master
  labels:
    app: redis
    chart: redis-3.3.5
    release: "RELEASE-NAME"
    heritage: "Tiller"
spec:
  selector:
    matchLabels:
      release: "RELEASE-NAME"
      role: master
      app: redis
  serviceName: "redis-master"
  template:
    metadata:
      labels:
        release: "RELEASE-NAME"
        role: master
        app: redis
    spec:
      securityContext:
        fsGroup: 1001
        runAsUser: 1001
      containers:
      - name: RELEASE-NAME-redis
        image: "docker.io/bitnami/redis:4.0.9"
        imagePullPolicy: "Always"
        env:
        - name: REDIS_REPLICATION_MODE
          value: master
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: RELEASE-NAME-redis
              key: redis-password
        - name: REDIS_DISABLE_COMMANDS
          value: FLUSHDB,FLUSHALL
        ports:
        - name: redis
          containerPort: 6379
        livenessProbe:
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 5
          exec:
            command:
            - redis-cli
            - ping
        readinessProbe:
          initialDelaySeconds: 5
          periodSeconds: 10
          timeoutSeconds: 1
          successThreshold: 1
          failureThreshold: 5
          exec:
            command:
            - redis-cli
            - ping
        resources:
          null
          
        volumeMounts:
        - name: redis-data
          mountPath: /bitnami/redis/data
          subPath: 
      volumes:
      - name: "redis-data"
        emptyDir: {}

---
# Source: airflow/templates/statefulsets-workers.yaml
## Workers are not in deployment, but in StatefulSet, to allow each worker expose a mini-server
## that only serve logs, that will be used by the web server.

apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: RELEASE-NAME-worker
  labels:
    app: airflow
    component: worker
    chart: airflow-0.9.0
    release: RELEASE-NAME
    heritage: Tiller
spec:
  serviceName: "RELEASE-NAME-worker"
  updateStrategy:
    ## Kill the workers as soon as possible, the scheduler will restart the failed job later
    type: RollingUpdate
  ## Use experimental burst mode for faster StatefulSet scaling
  ##   https://github.com/kubernetes/kubernetes/commit/c2c5051adf096ffd48bf1dcf5b11cb47e464ecdd
  podManagementPolicy: Parallel
  replicas: 1
  selector:
    matchLabels:
      app: airflow
      component: worker
      release: RELEASE-NAME
  template:
    metadata:
      annotations:
        checksum/config: 4a2c6e4eb2abc68f0a3e68e6e75acaec35c118da839b4bd7dcf1a3b95bee9661
        configmap.fabric8.io/update-on-change: "RELEASE-NAME-env"
        
      labels:
        app: airflow
        component: worker
        release: RELEASE-NAME
    spec:
      restartPolicy: Always
      terminationGracePeriodSeconds: 30
      serviceAccountName: RELEASE-NAME
      containers:
        - name: airflow-worker
          imagePullPolicy: IfNotPresent
          image: "puckel/docker-airflow:1.10.0-4"
          envFrom:
            - configMapRef:
                name: "RELEASE-NAME-env"
          env:
            - name: POSTGRES_USER
              valueFrom:
                secretKeyRef:
                  name: RELEASE-NAME
                  key: postgresUser
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: RELEASE-NAME
                  key: postgresPassword
            - name: REDIS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: RELEASE-NAME
                  key: redisPassword
          volumeMounts:
          args:
            - "bash"
            - "-c"
            - >
              echo 'waiting 60s...' &&
              sleep 60 &&
              mkdir -p /usr/local/airflow/.local/bin &&
              export PATH=/usr/local/airflow/.local/bin:$PATH &&
              echo 'executing worker...' &&
              airflow worker
          ports:
            - name: wlog
              containerPort: 8793
              protocol: TCP
          resources:
            {}
            
      volumes:
        - name: dags-data
          emptyDir: {}

---
# Source: airflow/templates/poddisruptionbudget.yaml
apiVersion: policy/v1beta1
kind: PodDisruptionBudget
metadata:
  name: RELEASE-NAME-pdb
  labels:
    app: airflow
    component: scheduler
    chart: airflow-0.9.0
    release: RELEASE-NAME
    heritage: Tiller
spec:
  selector:
    matchLabels:
      app: airflow
      component: scheduler
      release: RELEASE-NAME
  maxUnavailable: 1
  

---
# Source: airflow/charts/postgresql/templates/networkpolicy.yaml


---
# Source: airflow/charts/redis/templates/metrics-deployment.yaml


---
# Source: airflow/charts/redis/templates/metrics-svc.yaml


---
# Source: airflow/charts/redis/templates/networkpolicy.yaml


---
# Source: airflow/charts/redis/templates/redis-slave-deployment.yaml


---
# Source: airflow/charts/redis/templates/redis-slave-svc.yaml


---
# Source: airflow/templates/ingress-flower.yaml


---
# Source: airflow/templates/ingress-web.yaml


---
# Source: airflow/templates/pvc.yaml



---
# Source: dex/templates/secret.yaml
apiVersion: v1
kind: Secret
metadata:
  labels:
    app: dex
    chart: dex-0.5.0
    heritage: "Tiller"
    release: "RELEASE-NAME"
  name: RELEASE-NAME-dex
data:
  config.yaml: Y29ubmVjdG9yczogbnVsbAplbmFibGVQYXNzd29yZERCOiB0cnVlCmdycGM6CiAgYWRkcjogMC4wLjAuMDo1MDAwCiAgdGxzQ2VydDogL2V0Yy9kZXgvdGxzL2dycGMvc2VydmVyL3Rscy5jcnQKICB0bHNDbGllbnRDQTogL2V0Yy9kZXgvdGxzL2dycGMvY2EvdGxzLmNydAogIHRsc0tleTogL2V0Yy9kZXgvdGxzL2dycGMvc2VydmVyL3Rscy5rZXkKaXNzdWVyOiBodHRwOi8vZGV4LmlvOjgwODAKbG9nZ2VyOgogIGxldmVsOiBkZWJ1ZwpvYXV0aDI6CiAgc2tpcEFwcHJvdmFsU2NyZWVuOiB0cnVlCnN0b3JhZ2U6CiAgY29uZmlnOgogICAgaW5DbHVzdGVyOiB0cnVlCiAgdHlwZToga3ViZXJuZXRlcwp3ZWI6CiAgaHR0cDogMC4wLjAuMDo4MDgwCg==

---
# Source: dex/templates/config-openssl.yaml

apiVersion: v1
kind: ConfigMap
metadata:
  labels:
    app: dex
    chart: dex-0.5.0
    heritage: "Tiller"
    release: "RELEASE-NAME"
  name: RELEASE-NAME-dex-openssl-config
  annotations:
    "helm.sh/hook": post-install
    "helm.sh/hook-weight": "1"
    "helm.sh/hook-delete-policy": hook-succeeded
data:
  openssl.conf: |
    # OpenSSL configuration file.
    # Adapted from https://github.com/coreos/matchbox/blob/master/examples/etc/matchbox/openssl.conf
    
    # default environment variable values
    SAN =
    
    [ ca ]
    # `man ca`
    default_ca = CA_default
    
    [ CA_default ]
    # Directory and file locations.
    dir               = .
    certs             = $dir/certs
    crl_dir           = $dir/crl
    new_certs_dir     = $dir/newcerts
    database          = $dir/index.txt
    serial            = $dir/serial
    # certificate revocation lists.
    crlnumber         = $dir/crlnumber
    crl               = $dir/crl/intermediate-ca.crl
    crl_extensions    = crl_ext
    default_crl_days  = 30
    default_md        = sha256
    
    name_opt          = ca_default
    cert_opt          = ca_default
    default_days      = 375
    preserve          = no
    policy            = policy_loose
    
    [ policy_loose ]
    # Allow the CA to sign a range of certificates.
    countryName             = optional
    stateOrProvinceName     = optional
    localityName            = optional
    organizationName        = optional
    organizationalUnitName  = optional
    commonName              = supplied
    emailAddress            = optional
    
    [ req ]
    # `man req`
    default_bits        = 4096
    distinguished_name  = req_distinguished_name
    string_mask         = utf8only
    default_md          = sha256
    
    [ req_distinguished_name ]
    countryName                    = Country Name (2 letter code)
    stateOrProvinceName            = State or Province Name
    localityName                   = Locality Name
    0.organizationName             = Organization Name
    organizationalUnitName         = Organizational Unit Name
    commonName                     = Common Name
    
    # Certificate extensions (`man x509v3_config`)
    
    [ v3_ca ]
    subjectKeyIdentifier = hash
    authorityKeyIdentifier = keyid:always,issuer
    basicConstraints = critical, CA:true, pathlen:0
    keyUsage = critical, digitalSignature, cRLSign, keyCertSign
    
    [ usr_cert ]
    basicConstraints = CA:FALSE
    nsCertType = client
    nsComment = "OpenSSL Generated Client Certificate"
    subjectKeyIdentifier = hash
    authorityKeyIdentifier = keyid,issuer
    keyUsage = critical, nonRepudiation, digitalSignature, keyEncipherment
    extendedKeyUsage = clientAuth
    
    [ server_cert ]
    basicConstraints = CA:FALSE
    nsCertType = server
    nsComment = "OpenSSL Generated Server Certificate"
    subjectKeyIdentifier = hash
    authorityKeyIdentifier = keyid,issuer:always
    keyUsage = critical, digitalSignature, keyEncipherment
    extendedKeyUsage = serverAuth
    subjectAltName = $ENV::SAN
    

---
# Source: dex/templates/serviceaccount.yaml

apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app: dex
    chart: dex-0.5.0
    heritage: "Tiller"
    release: "RELEASE-NAME"
  name: RELEASE-NAME-dex
---
# Source: dex/templates/rolebinding.yaml

apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRoleBinding
metadata:
  labels:
    app: dex
    chart: dex-0.5.0
    heritage: "Tiller"
    release: "RELEASE-NAME"
  name: RELEASE-NAME-dex
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cluster-admin
subjects:
  - kind: ServiceAccount
    name: RELEASE-NAME-dex
    namespace: hub
---
# Source: dex/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: RELEASE-NAME-dex
  labels:
    app: dex
    chart: dex-0.5.0
    release: RELEASE-NAME
    heritage: Tiller
spec:
  type: ClusterIP
  sessionAffinity: None
  ports:
  - name: http 
    port: 8080
    targetPort: 8080
  - name: grpc 
    port: 5000
    targetPort: 5000
  selector:
    app: dex
    release: "RELEASE-NAME"

---
# Source: dex/templates/deployment.yaml








apiVersion: apps/v1beta2
kind: Deployment
metadata:
  name: RELEASE-NAME-dex
  labels:
    app: dex
    chart: dex-0.5.0
    heritage: "Tiller"
    release: "RELEASE-NAME"
spec:
  replicas: 1
  strategy:
    rollingUpdate:
      maxSurge: 0
      maxUnavailable: 1
    type: RollingUpdate
  selector:
    matchLabels:
      app: dex
      release: "RELEASE-NAME"
  template:
    metadata:
      labels:
        app: dex
        release: "RELEASE-NAME"
    spec:
      serviceAccountName: RELEASE-NAME-dex
      nodeSelector:
          {}
          
      containers:
      - name: main
        image: "quay.io/dexidp/dex:v2.11.0"
        imagePullPolicy: IfNotPresent
        command:
        - /usr/local/bin/dex
        - serve
        - /etc/dex/cfg/config.yaml
        resources:
          null
          
        ports:
          - containerPort: 8080
            name: http
            protocol: TCP
          - containerPort: 5000
            name: grpc
            protocol: TCP
          
        env:
          []
          
        volumeMounts:
        - mountPath: /etc/dex/cfg
          name: config
        - mountPath: /etc/dex/tls/https/server
          name: https-tls
        - mountPath: /etc/dex/tls/grpc/server
          name: grpc-tls-server
        - mountPath: /etc/dex/tls/grpc/ca
          name: grpc-tls-ca
      volumes:
      - secret:
          defaultMode: 420
          items:
          - key: config.yaml
            path: config.yaml
          secretName: RELEASE-NAME-dex
        name: config
      - name: https-tls
        secret:
          defaultMode: 420
          secretName: "dex-web-server-tls"
      - name: grpc-tls-server
        secret:
          defaultMode: 420
          secretName: "dex-grpc-server-tls"
      - name: grpc-tls-ca
        secret:
          defaultMode: 420
          secretName: "dex-grpc-ca"


---
# Source: dex/templates/job-grpc-certs.yaml










apiVersion: batch/v1
kind: Job
metadata:
  annotations:
    "helm.sh/hook": post-install
    "helm.sh/hook-weight": "2"
    "helm.sh/hook-delete-policy": hook-succeeded
  name: RELEASE-NAME-dex-grpc-certs
  labels:
    app: dex
    chart: dex-0.5.0
    heritage: "Tiller"
    release: "RELEASE-NAME"
    component: "job"
spec:
  activeDeadlineSeconds: 300
  template:
    metadata:
      labels:
        app: dex
        release: "RELEASE-NAME"
        component: "job"
    spec:
      serviceAccountName: RELEASE-NAME-dex
      restartPolicy: OnFailure
      containers:
      - name: main
        image: "gcr.io/google_containers/kubernetes-dashboard-init-amd64:v1.0.0"
        imagePullPolicy: IfNotPresent
        command:
        - /bin/bash
        - -exc
        - |
          export CONFIG=/etc/dex/tls/grpc/openssl.conf;
          cat << EOF > san.cnf
          DNS.1:dex.io
          EOF
          export SAN=$(cat san.cnf |  paste -sd "," -)

          # Creating basic files/directories
          mkdir -p {certs,crl,newcerts}
          touch index.txt
          touch index.txt.attr
          echo 1000 > serial
          # CA private key (unencrypted)
          openssl genrsa -out ca.key 4096;
          # Certificate Authority (self-signed certificate)
          openssl req -config $CONFIG -new -x509 -days 3650 -sha256 -key ca.key -extensions v3_ca -out ca.crt -subj "/CN=grpc-ca";
          # Server private key (unencrypted)
          openssl genrsa -out server.key 2048;
          # Server certificate signing request (CSR)
          openssl req -config $CONFIG -new -sha256 -key server.key -out server.csr -subj "/CN=grpc-server";
          # Certificate Authority signs CSR to grant a certificate
          openssl ca -batch -config $CONFIG  -extensions server_cert -days 365 -notext -md sha256 -in server.csr -out server.crt -cert ca.crt -keyfile ca.key;
          # Client private key (unencrypted)
          openssl genrsa -out client.key 2048;
          # Signed client certificate signing request (CSR)
          openssl req -config $CONFIG -new -sha256 -key client.key -out client.csr -subj "/CN=grpc-client";
          # Certificate Authority signs CSR to grant a certificate
          openssl ca -batch -config $CONFIG -extensions usr_cert -days 365 -notext -md sha256 -in client.csr -out client.crt -cert ca.crt -keyfile ca.key;
          # Remove CSR's
          rm *.csr;

          # Cleanup the existing configmap and secrets
          kubectl delete configmap dex-grpc-ca --namespace hub || true
          kubectl delete secret dex-grpc-ca dex-grpc-server-tls dex-grpc-client-tls --namespace hub || true
          kubectl create configmap dex-grpc-ca --namespace hub --from-file=ca.crt;
          # Store all certficates in secrets
          kubectl create secret tls dex-grpc-ca --namespace hub --cert=ca.crt --key=ca.key;
          kubectl create secret tls dex-grpc-server-tls --namespace hub --cert=server.crt --key=server.key;
          kubectl create secret tls dex-grpc-client-tls --namespace hub --cert=client.crt --key=client.key;
        volumeMounts:
        - name: openssl-config
          mountPath: /etc/dex/tls/grpc
      volumes:
      - name: openssl-config
        configMap:
          name: RELEASE-NAME-dex-openssl-config

---
# Source: dex/templates/job-web-certs.yaml







apiVersion: batch/v1
kind: Job
metadata:
  annotations:
    "helm.sh/hook": post-install
    "helm.sh/hook-weight": "1"
    "helm.sh/hook-delete-policy": hook-succeeded
  name: RELEASE-NAME-dex-web-certs
  labels:
    app: dex
    chart: dex-0.5.0
    heritage: "Tiller"
    release: "RELEASE-NAME"
    component: "job"
spec:
  activeDeadlineSeconds: 300
  template:
    metadata:
      labels:
        app: dex
        release: "RELEASE-NAME"
        component: "job"
    spec:
      serviceAccountName: RELEASE-NAME-dex
      restartPolicy: OnFailure
      containers:
      - name: main
        image: "gcr.io/google_containers/kubernetes-dashboard-init-amd64:v1.0.0"
        imagePullPolicy: IfNotPresent
        command:
        - /bin/bash
        - -exc
        - |
          cat << EOF > req.cnf
          [req]
          req_extensions = v3_req
          distinguished_name = req_distinguished_name

          [req_distinguished_name]

          [ v3_req ]
          basicConstraints = CA:FALSE
          keyUsage = nonRepudiation, digitalSignature, keyEncipherment
          subjectAltName = @alt_names

          [alt_names]
          DNS.1 = dex.io
          EOF

          openssl genrsa -out ca-key.pem 2048;
          openssl req -x509 -new -nodes -key ca-key.pem -days 10000 -out ca.pem -subj "/CN=dex-ca";

          openssl genrsa -out key.pem 2048;
          openssl req -new -key key.pem -out csr.pem -subj "/CN=dex" -config req.cnf;
          openssl x509 -req -in csr.pem -CA ca.pem -CAkey ca-key.pem -CAcreateserial -out cert.pem -days 10000 -extensions v3_req -extfile req.cnf;

          kubectl delete configmap "dex-web-server-ca" --namespace hub || true
          kubectl delete secret "dex-web-server-ca" dex-web-server-tls --namespace hub || true

          kubectl create configmap "dex-web-server-ca" --namespace hub --from-file dex-ca.pem=ca.pem;
          kubectl create secret tls "dex-web-server-ca" --namespace hub --cert=ca.pem --key=ca-key.pem;
          kubectl create secret tls dex-web-server-tls --namespace hub --cert=cert.pem --key=key.pem;

---
# Source: dex/templates/ingress.yaml



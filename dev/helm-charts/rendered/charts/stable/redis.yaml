---
# Source: redis/templates/secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: RELEASE-NAME-redis
  labels:
    app: redis
    chart: redis-5.1.0
    release: "RELEASE-NAME"
    heritage: "Tiller"
type: Opaque
data:
  redis-password: "YXYwTHA2STJoOQ=="
---
# Source: redis/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  labels:
    app: redis
    chart: redis-5.1.0
    heritage: Tiller
    release: RELEASE-NAME
  name: RELEASE-NAME-redis
data:
  redis.conf: |-
    # User-supplied configuration:
    # maxmemory-policy volatile-lru
  master.conf: |-
    dir /data
    rename-command FLUSHDB ""
    rename-command FLUSHALL ""
  replica.conf: |-
    dir /data
    rename-command FLUSHDB ""
    rename-command FLUSHALL ""

---
# Source: redis/templates/health-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  labels:
    app: redis
    chart: redis-5.1.0
    heritage: Tiller
    release: RELEASE-NAME
  name: RELEASE-NAME-redis-health
data:
  ping_local.sh: |-
    response=$(
      redis-cli \
        -a $REDIS_PASSWORD \
        -h localhost \
        -p $REDIS_PORT \
        ping
    )
    if [ "$response" != "PONG" ]; then
      echo "$response"
      exit 1
    fi
  ping_master.sh: |-
    response=$(
      redis-cli \
        -a $REDIS_MASTER_PASSWORD \
        -h $REDIS_MASTER_HOST \
        -p $REDIS_MASTER_PORT_NUMBER \
        ping
    )
    if [ "$response" != "PONG" ]; then
      echo "$response"
      exit 1
    fi
  ping_local_and_master.sh: |-
    script_dir="$(dirname "$0")"
    exit_status=0
    "$script_dir/ping_local.sh" || exit_status=$?
    "$script_dir/ping_master.sh" || exit_status=$?
    exit $exit_status

---
# Source: redis/templates/redis-master-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: RELEASE-NAME-redis-master
  labels:
    app: redis
    chart: redis-5.1.0
    release: "RELEASE-NAME"
    heritage: "Tiller"
spec:
  type: ClusterIP
  ports:
  - name: redis
    port: 6379
    targetPort: redis
  selector:
    app: redis
    release: "RELEASE-NAME"
    role: master

---
# Source: redis/templates/redis-slave-svc.yaml

apiVersion: v1
kind: Service
metadata:
  name: RELEASE-NAME-redis-slave
  labels:
    app: redis
    chart: redis-5.1.0
    release: "RELEASE-NAME"
    heritage: "Tiller"
spec:
  type: ClusterIP
  ports:
  - name: redis
    port: 6379
    targetPort: redis
  selector:
    app: redis
    release: "RELEASE-NAME"
    role: slave

---
# Source: redis/templates/redis-slave-deployment.yaml

apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: RELEASE-NAME-redis-slave
  labels:
    app: redis
    chart: redis-5.1.0
    release: "RELEASE-NAME"
    heritage: "Tiller"
spec:
  replicas: 1
  selector:
    matchLabels:
        release: "RELEASE-NAME"
        role: slave
        app: redis
  template:
    metadata:
      labels:
        release: "RELEASE-NAME"
        chart: redis-5.1.0
        role: slave
        app: redis
      annotations:
        checksum/health: 6f08c7bc74f42f214ac63a4236be56255367f61991d75eab11b4c1320286b26c
        checksum/configmap: 50eff1f5ed7d79b66e3eab78292029ac6d7b8767b3b220a054e80182179f8401
        checksum/secret: 7264f7c753a86a2a69bad9c01f86150c7d93333d84c0a43fb2965f3e552946bc
    spec:      
      securityContext:
        fsGroup: 1001
        runAsUser: 1001
      serviceAccountName: "default"
      containers:
      - name: RELEASE-NAME-redis
        image: docker.io/bitnami/redis:4.0.11
        imagePullPolicy: "Always"
        command:
          - /run.sh
          
        args:
        - "--port"
        - "$(REDIS_PORT)"
        - "--slaveof"
        - "$(REDIS_MASTER_HOST)"
        - "$(REDIS_MASTER_PORT_NUMBER)"
        - "--requirepass"
        - "$(REDIS_PASSWORD)"
        - "--masterauth"
        - "$(REDIS_MASTER_PASSWORD)"
        - "--include"
        - "/opt/bitnami/redis/etc/redis.conf"
        - "--include"
        - "/opt/bitnami/redis/etc/replica.conf"
        env:
        - name: REDIS_REPLICATION_MODE
          value: slave
        - name: REDIS_MASTER_HOST
          value: RELEASE-NAME-redis-master
        - name: REDIS_PORT
          value: "6379"
        - name: REDIS_MASTER_PORT_NUMBER
          value: "6379"
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: RELEASE-NAME-redis
              key: redis-password
        - name: REDIS_MASTER_PASSWORD
          valueFrom:
            secretKeyRef:
              name: RELEASE-NAME-redis
              key: redis-password
        ports:
        - name: redis
          containerPort: 6379        
        livenessProbe:
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 5
          exec:
            command:
            - sh
            - -c
            - /health/ping_local_and_master.sh        
        readinessProbe:
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 1
          successThreshold: 1
          failureThreshold: 5
          exec:
            command:
            - sh
            - -c
            - /health/ping_local_and_master.sh
        resources:
          null
          
        volumeMounts:
        - name: health
          mountPath: /health
        - name: redis-data
          mountPath: /data
        - name: config
          mountPath: /opt/bitnami/redis/etc
      volumes:
      - name: health
        configMap:
          name: RELEASE-NAME-redis-health
          defaultMode: 0755
      - name: config
        configMap:
          name: RELEASE-NAME-redis
      - name: redis-data
        emptyDir: {}

---
# Source: redis/templates/redis-master-statefulset.yaml
apiVersion: apps/v1beta2
kind: StatefulSet
metadata:
  name: RELEASE-NAME-redis-master
  labels:
    app: redis
    chart: redis-5.1.0
    release: "RELEASE-NAME"
    heritage: "Tiller"
spec:
  selector:
    matchLabels:
      release: "RELEASE-NAME"
      role: master
      app: redis
  serviceName: RELEASE-NAME-redis-master
  template:
    metadata:
      labels:
        release: "RELEASE-NAME"
        chart: redis-5.1.0
        role: master
        app: redis
      annotations:
        checksum/health: 6f08c7bc74f42f214ac63a4236be56255367f61991d75eab11b4c1320286b26c
        checksum/configmap: 50eff1f5ed7d79b66e3eab78292029ac6d7b8767b3b220a054e80182179f8401
        checksum/secret: a62a2e26f6f9d4e3ad7367f30414333f2b6e54f8ca5d6b913d66b9a4285f992b
    spec:
      securityContext:
        fsGroup: 1001
        runAsUser: 1001
      serviceAccountName: "default"
      containers:
      - name: RELEASE-NAME-redis
        image: "docker.io/bitnami/redis:4.0.11"
        imagePullPolicy: "Always"
        command:
          - /run.sh
          
        args:
        - "--port"
        - "$(REDIS_PORT)"
        - "--requirepass"
        - "$(REDIS_PASSWORD)"
        - "--include"
        - "/opt/bitnami/redis/etc/redis.conf"
        - "--include"
        - "/opt/bitnami/redis/etc/master.conf"
        env:
        - name: REDIS_REPLICATION_MODE
          value: master
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: RELEASE-NAME-redis
              key: redis-password
        - name: REDIS_PORT
          value: "6379"
        ports:
        - name: redis
          containerPort: 6379
        livenessProbe:
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 5
          exec:
            command:
            - sh
            - -c
            - /health/ping_local.sh
        readinessProbe:
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 1
          successThreshold: 1
          failureThreshold: 5
          exec:
            command:
            - sh
            - -c
            - /health/ping_local.sh
        resources:
          null
          
        volumeMounts:
        - name: health
          mountPath: /health
        - name: redis-data
          mountPath: /data
          subPath: 
        - name: config
          mountPath: /opt/bitnami/redis/etc
      initContainers:
      - name: volume-permissions
        image: "docker.io/bitnami/minideb:latest"
        imagePullPolicy: "IfNotPresent"
        command: ["/bin/chown", "-R", "1001:1001", "/data"]
        securityContext:
          runAsUser: 0
        volumeMounts:
        - name: redis-data
          mountPath: /data
          subPath: 
      volumes:
      - name: health
        configMap:
          name: RELEASE-NAME-redis-health
          defaultMode: 0755
      - name: config
        configMap:
          name: RELEASE-NAME-redis
  volumeClaimTemplates:
    - metadata:
        name: redis-data
        labels:
          app: "redis"
          component: "master"
          release: "RELEASE-NAME"
          heritage: "Tiller"
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "8Gi"
  updateStrategy:
    type: RollingUpdate

---
# Source: redis/templates/metrics-deployment.yaml


---
# Source: redis/templates/metrics-prometheus.yaml

---
# Source: redis/templates/metrics-svc.yaml


---
# Source: redis/templates/networkpolicy.yaml


---
# Source: redis/templates/redis-role.yaml

---
# Source: redis/templates/redis-rolebinding.yaml

---
# Source: redis/templates/redis-serviceaccount.yaml


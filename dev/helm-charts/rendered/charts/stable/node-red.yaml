---
# Source: node-red/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: RELEASE-NAME-node-red
  labels:
    app.kubernetes.io/name: node-red
    helm.sh/chart: node-red-1.0.1
    app.kubernetes.io/instance: RELEASE-NAME
    app.kubernetes.io/managed-by: Tiller
spec:
  type: ClusterIP
  ports:
    - port: 1880
      targetPort: http
      protocol: TCP
      name: http

  selector:
    app.kubernetes.io/name: node-red
    app.kubernetes.io/instance: RELEASE-NAME
---
# Source: node-red/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: RELEASE-NAME-node-red
  labels:
    app.kubernetes.io/name: node-red
    helm.sh/chart: node-red-1.0.1
    app.kubernetes.io/instance: RELEASE-NAME
    app.kubernetes.io/managed-by: Tiller
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: node-red
      app.kubernetes.io/instance: RELEASE-NAME
  template:
    metadata:
      labels:
        app.kubernetes.io/name: node-red
        app.kubernetes.io/instance: RELEASE-NAME
    spec:
      containers:
        - name: node-red
          image: "nodered/node-red-docker:0.19.4-v8"
          imagePullPolicy: IfNotPresent
          ports:
            - name: http
              containerPort: 1880
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /
              port: http
          readinessProbe:
            httpGet:
              path: /
              port: http
          env:
            - name: FLOWS
              value: ""
            - name: NODE_OPTIONS
              value: ""
            - name: TZ
              value: "UTC"
          volumeMounts:
            - name: data
              mountPath: /data
          resources:
            {}
            
      volumes:
        - name: data
          emptyDir: {}
        
      securityContext:
        fsGroup: 1001

---
# Source: node-red/templates/ingress.yaml


---
# Source: node-red/templates/pvc.yaml


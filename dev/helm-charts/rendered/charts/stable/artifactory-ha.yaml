---
# Source: artifactory-ha/charts/postgresql/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: RELEASE-NAME-postgresql
  labels:
    app: RELEASE-NAME-postgresql
    chart: "postgresql-0.8.7"
    release: "RELEASE-NAME"
    heritage: "Tiller"
type: Opaque
data:
  
  postgres-password: "Z09YRjQ4d012Yw=="
  

---
# Source: artifactory-ha/templates/artifactory-secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: RELEASE-NAME-artifactory-ha
  labels:
    app: artifactory-ha
    chart: artifactory-ha-0.4.1
    heritage: Tiller
    release: RELEASE-NAME
type: Opaque
data:
  master-key: "RkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRg=="

---
# Source: artifactory-ha/templates/artifactory-binarystore.yaml
kind: ConfigMap
apiVersion: v1
metadata:
  name: RELEASE-NAME-artifactory-ha-bs
  labels:
    app: artifactory-ha
    chart: artifactory-ha-0.4.1
    heritage: Tiller
    release: RELEASE-NAME
data:
  binarystore.xml: |-
    <!-- File system replication -->
    <config version="2">
        <chain>
            <provider id="cache-fs" type="cache-fs">
                <provider id="sharding-cluster" type="sharding-cluster">
                    <readBehavior>crossNetworkStrategy</readBehavior>
                    <writeBehavior>crossNetworkStrategy</writeBehavior>
                    <redundancy>3</redundancy>
                    <lenientLimit>2</lenientLimit>
                    <minSpareUploaderExecutor>2</minSpareUploaderExecutor>
                    <sub-provider id="state-aware" type="state-aware"/>
                    <dynamic-provider id="remote" type="remote"/>
                    <property name="zones" value="local,remote"/>
                </provider>
            </provider>
        </chain>

        <!-- Shards add local file-system provider configuration -->
        <provider id="state-aware" type="state-aware">
            <fileStoreDir>shard-fs-1</fileStoreDir>
            <zone>local</zone>
        </provider>

        <!-- Shards dynamic remote provider configuration -->
        <provider id="remote" type="remote">
            <checkPeriod>30</checkPeriod>
            <serviceId>tester-remote1</serviceId>
            <timeout>10000</timeout>
            <zone>remote</zone>
            <property name="header.remote.block" value="true"/>
        </provider>
    </config>

---
# Source: artifactory-ha/templates/artifactory-plugin-inactiveservercleaner.yaml
kind: ConfigMap
apiVersion: v1
metadata:
  name: RELEASE-NAME-artifactory-ha-isc
  labels:
    app: artifactory-ha
    chart: artifactory-ha-0.4.1
    heritage: Tiller
    release: RELEASE-NAME
data:
  inactiveServerCleaner.groovy: |-
    import org.artifactory.state.ArtifactoryServerState
    import org.artifactory.storage.db.servers.service.ArtifactoryServersCommonService
    import org.artifactory.common.ConstantValues
    import org.slf4j.Logger

    import java.util.concurrent.TimeUnit

    jobs {
        clean(interval: 90000, delay: 900000) {
            runCleanupHAInactiveServers()
        }
    }

    executions {
        cleanHAInactiveServers() { params ->
            runCleanupHAInactiveServers()
        }
    }

    def runCleanupHAInactiveServers() {
        def artifactoryServersCommonService = ctx.beanForType(ArtifactoryServersCommonService)
        def artifactoryInactiveServerCleaner = new ArtifactoryInactiveServersCleaner(artifactoryServersCommonService, log)
        artifactoryInactiveServerCleaner.cleanInactiveArtifactoryServers()
    }

    public class ArtifactoryInactiveServersCleaner {

        private ArtifactoryServersCommonService artifactoryServersCommonService
        private Logger log

        ArtifactoryInactiveServersCleaner(ArtifactoryServersCommonService artifactoryServersCommonService, Logger log) {
            this.artifactoryServersCommonService = artifactoryServersCommonService
            this.log = log
        }

        def cleanInactiveArtifactoryServers() {
            log.info "Executing inactive artifactory servers cleaner plugin"
            List<String> allMembers = artifactoryServersCommonService.getAllArtifactoryServers()
            for (member in allMembers) {
                def heartbeat = TimeUnit.MILLISECONDS.toSeconds(System.currentTimeMillis() - member.getLastHeartbeat())
                def noHeartbeat = heartbeat > ConstantValues.haHeartbeatStaleIntervalSecs.getInt()
                if (member.getServerState() == ArtifactoryServerState.UNAVAILABLE || ( noHeartbeat && member.getServerState() != ArtifactoryServerState.CONVERTING && member.getServerState() != ArtifactoryServerState.STARTING )) {
                    try {
                        log.info "Inactive artifactory servers cleaning task found server ${member.serverId} to remove"
                        artifactoryServersCommonService.removeServer(member.serverId)

                    }catch (Exception e){
                        log.error "Error: Not able to remove ${member.serverId}, ${e.message}"
                    }
                }
            }
            log.info "No inactive servers found"
        }
    }
---
# Source: artifactory-ha/charts/postgresql/templates/pvc.yaml
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: RELEASE-NAME-postgresql
  labels:
    app: RELEASE-NAME-postgresql
    chart: "postgresql-0.8.7"
    release: "RELEASE-NAME"
    heritage: "Tiller"
spec:
  accessModes:
    - "ReadWriteOnce"
  resources:
    requests:
      storage: "50Gi"
---
# Source: artifactory-ha/templates/artifactory-serviceaccount.yaml

apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app: artifactory-ha
    chart: artifactory-ha-0.4.1
    component: artifactory-ha
    heritage: Tiller
    release: RELEASE-NAME
  name: RELEASE-NAME-artifactory-ha

---
# Source: artifactory-ha/templates/artifactory-role.yaml

apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  labels:
    app: artifactory-ha
    chart: artifactory-ha-0.4.1
    component: artifactory-ha
    heritage: Tiller
    release: RELEASE-NAME
  name: RELEASE-NAME-artifactory-ha
rules:
- apiGroups:
  - ""
  resources:
  - services
  - endpoints
  - pods
  verbs:
  - get
  - watch
  - list


---
# Source: artifactory-ha/templates/artifactory-rolebinding.yaml

apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  labels:
    app: artifactory-ha
    chart: artifactory-ha-0.4.1
    component: artifactory-ha
    heritage: Tiller
    release: RELEASE-NAME
  name: RELEASE-NAME-artifactory-ha
subjects:
- kind: ServiceAccount
  name: RELEASE-NAME-artifactory-ha
roleRef:
  kind: Role
  apiGroup: rbac.authorization.k8s.io
  name: RELEASE-NAME-artifactory-ha

---
# Source: artifactory-ha/charts/postgresql/templates/svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: RELEASE-NAME-postgresql
  labels:
    app: RELEASE-NAME-postgresql
    chart: "postgresql-0.8.7"
    release: "RELEASE-NAME"
    heritage: "Tiller"
spec:
  type: ClusterIP
  ports:
  - name: postgresql
    port: 5432
    targetPort: postgresql
  selector:
    app: RELEASE-NAME-postgresql
---
# Source: artifactory-ha/templates/artifactory-service.yaml
# Service for all Artifactory cluster nodes.
apiVersion: v1
kind: Service
metadata:
  name: RELEASE-NAME-artifactory-ha
  labels:
    app: artifactory-ha
    chart: artifactory-ha-0.4.1
    component: artifactory-ha
    heritage: Tiller
    release: RELEASE-NAME
spec:
  type: ClusterIP
  ports:
  - port: 8081
    targetPort: 8081
    protocol: TCP
    name: http
  selector:
    role: RELEASE-NAME-artifactory-ha-member
    app: artifactory-ha
    component: "artifactory-ha"
    release: RELEASE-NAME
---
# Internal service for Artifactory primary node only!
# Used by member nodes to check readiness of primary node before starting up
apiVersion: v1
kind: Service
metadata:
  name: RELEASE-NAME-artifactory-ha-primary
  labels:
    app: artifactory-ha
    chart: artifactory-ha-0.4.1
    component: artifactory-ha
    heritage: Tiller
    release: RELEASE-NAME
spec:
  type: ClusterIP
  ports:
  - port: 8081
    targetPort: 8081
    protocol: TCP
    name: http
  selector:
    role: RELEASE-NAME-artifactory-ha-primary
    app: artifactory-ha
    component: "artifactory-ha"
    release: RELEASE-NAME

---
# Source: artifactory-ha/templates/nginx-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: RELEASE-NAME-nginx
  labels:
    app: artifactory-ha
    chart: artifactory-ha-0.4.1
    heritage: Tiller
    release: RELEASE-NAME
    component: nginx
spec:
  type: LoadBalancer
  externalTrafficPolicy: Local
  ports:
  - port: 80
    targetPort: 80
    protocol: TCP
    name: http
  - port: 443
    targetPort: 443
    protocol: TCP
    name: https
  selector:
    app: artifactory-ha
    component: nginx
    release: RELEASE-NAME
---
# Source: artifactory-ha/charts/postgresql/templates/deployment.yaml
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: RELEASE-NAME-postgresql
  labels:
    app: RELEASE-NAME-postgresql
    chart: "postgresql-0.8.7"
    release: "RELEASE-NAME"
    heritage: "Tiller"
spec:
  template:
    metadata:
      labels:
        app: RELEASE-NAME-postgresql
    spec:
      containers:
      - name: RELEASE-NAME-postgresql
        image: "postgres:9.6.2"
        imagePullPolicy: ""
        env:
        - name: POSTGRES_USER
          value: "artifactory"
          # Required for pg_isready in the health probes.
        - name: PGUSER
          value: "artifactory"
        - name: POSTGRES_DB
          value: "artifactory"
        - name: POSTGRES_INITDB_ARGS
          value: ""
        - name: PGDATA
          value: /var/lib/postgresql/data/pgdata
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: RELEASE-NAME-postgresql
              key: postgres-password
        - name: POD_IP
          valueFrom: { fieldRef: { fieldPath: status.podIP } }
        ports:
        - name: postgresql
          containerPort: 5432
        livenessProbe:
          exec:
            command:
            - sh
            - -c
            - exec pg_isready --host $POD_IP
          initialDelaySeconds: 60
          timeoutSeconds: 5
          failureThreshold: 6
        readinessProbe:
          exec:
            command:
            - sh
            - -c
            - exec pg_isready --host $POD_IP
          initialDelaySeconds: 5
          timeoutSeconds: 3
          periodSeconds: 5
        resources:
          requests:
            cpu: 100m
            memory: 256Mi
          
        volumeMounts:
        - name: data
          mountPath: /var/lib/postgresql/data/pgdata
          subPath: postgresql-db
      volumes:
      - name: data
        persistentVolumeClaim:
          claimName: RELEASE-NAME-postgresql

---
# Source: artifactory-ha/templates/nginx-deployment.yaml
apiVersion: apps/v1beta2
kind: Deployment
metadata:
  name: RELEASE-NAME-nginx
  labels:
    app: artifactory-ha
    chart: artifactory-ha-0.4.1
    heritage: Tiller
    release: RELEASE-NAME
    component: nginx
spec:
  replicas: 1
  selector:
    matchLabels:
      app: artifactory-ha
      release: RELEASE-NAME
      component: nginx
  template:
    metadata:
      labels:
        app: artifactory-ha
        component: nginx
        release: RELEASE-NAME
    spec:
      serviceAccountName: RELEASE-NAME-artifactory-ha
      initContainers:
      - name: "wait-for-artifactory"
        image: "alpine:3.6"
        command:
        - 'sh'
        - '-c'
        - >
          until nc -z -w 2 RELEASE-NAME-artifactory-ha 8081 && echo artifactory ok; do
            sleep 2;
          done;
      containers:
      - name: nginx
        image: 'docker.bintray.io/jfrog/nginx-artifactory-pro:6.2.0'
        imagePullPolicy: IfNotPresent
        lifecycle:
          postStart:
            exec:
              command:
              - '/bin/sh'
              - '-c'
              - >
                if [ -f /tmp/replicator-nginx.conf ]; then
                cp -fv /tmp/replicator-nginx.conf /etc/nginx/conf.d/replicator-nginx.conf;
                fi;
                if [ -f /tmp/ssl/*.crt ]; then
                rm -rf /var/opt/jfrog/nginx/ssl/example.*;
                cp -fv /tmp/ssl/* /var/opt/jfrog/nginx/ssl;
                fi;
                until [ -f /etc/nginx/conf.d/artifactory.conf ]; do sleep 1; done;
                if ! grep -q 'upstream' /etc/nginx/conf.d/artifactory.conf; then
                sed -i -e 's,proxy_pass .*,proxy_pass     http://RELEASE-NAME-artifactory-ha:8081/artifactory/;,g' \
                    -e 's,server_name .*,server_name ~(?<repo>.+)\\.RELEASE-NAME-artifactory-ha RELEASE-NAME-artifactory-ha;,g' \
                    /etc/nginx/conf.d/artifactory.conf;
                fi;
                if ! grep -q 'proxy_http_version' /etc/nginx/conf.d/artifactory.conf; then
                sed -i 's,\(proxy_next_upstream .*\),proxy_http_version  1.1;\n    \1,g' /etc/nginx/conf.d/artifactory.conf;
                fi;
                sleep 5; nginx -s reload; touch /var/log/nginx/conf.done
        env:
        - name: ART_BASE_URL
          value: 'http://RELEASE-NAME-artifactory-ha:8081/artifactory'
        - name: SSL
          value: "true"
        - name: SKIP_AUTO_UPDATE_CONFIG
          value: "false"
        ports:
        - containerPort: 80
        - containerPort: 443
        volumeMounts:
        - name: nginx-volume
          mountPath: "/var/opt/jfrog/nginx"
        resources:
          {}
          
        readinessProbe:
          httpGet:
            path: '/artifactory/webapp/#/login'
            port: 80
          initialDelaySeconds: 60
          periodSeconds: 10
          timeoutSeconds: 10
          failureThreshold: 10
          successThreshold: 1
        livenessProbe:
          httpGet:
            path: '/artifactory/webapp/#/login'
            port: 80
          initialDelaySeconds: 100
          periodSeconds: 10
          timeoutSeconds: 10
          failureThreshold: 10
          successThreshold: 1
      volumes:
      - name: nginx-volume
        emptyDir: {}

---
# Source: artifactory-ha/templates/artifactory-node-statefulset.yaml
apiVersion: apps/v1beta2
kind: StatefulSet
metadata:
  name: RELEASE-NAME-artifactory-ha-member
  labels:
    app: artifactory-ha
    chart: artifactory-ha-0.4.1
    component: artifactory-ha
    heritage: Tiller
    release: RELEASE-NAME
spec:
  serviceName: RELEASE-NAME-artifactory-ha-member
  replicas: 2
  updateStrategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app: artifactory-ha
      role: RELEASE-NAME-artifactory-ha-member
      release: RELEASE-NAME
  template:
    metadata:
      labels:
        app: artifactory-ha
        role: RELEASE-NAME-artifactory-ha-member
        component: artifactory-ha
        release: RELEASE-NAME
    spec:
      serviceAccountName: RELEASE-NAME-artifactory-ha
      securityContext:
        runAsUser: 1030
        fsGroup: 1030
      initContainers:
      - name: "remove-lost-found"
        image: "alpine:3.6"
        imagePullPolicy: IfNotPresent
        command:
        - 'sh'
        - '-c'
        - 'rm -rfv /var/opt/jfrog/artifactory/lost+found'
        volumeMounts:
        - mountPath: "/var/opt/jfrog/artifactory"
          name: volume
      - name: "wait-for-db"
        image: "alpine:3.6"
        command:
        - 'sh'
        - '-c'
        - >
          until nc -z -w 2 RELEASE-NAME-postgresql 5432 && echo database ok; do
            sleep 2;
          done;
      containers:
      - name: artifactory-ha
        image: 'docker.bintray.io/jfrog/artifactory-pro:6.2.0'
        imagePullPolicy: IfNotPresent
        securityContext:
          allowPrivilegeEscalation: false
        lifecycle:
          postStart:
            exec:
              command:
              - '/bin/sh'
              - '-c'
              - >
        env:
        - name: DB_TYPE
          value: 'postgresql'
        - name: DB_HOST
          value: 'RELEASE-NAME-postgresql'
        - name: DB_PORT
          value: '5432'
        - name: DB_USER
          value: 'artifactory'
        - name: DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: RELEASE-NAME-postgresql
              key: postgres-password
        - name: EXTRA_JAVA_OPTIONS
          value: "
          -Dartifactory.locking.provider.type=db
            "
        - name: ARTIFACTORY_MASTER_KEY
          valueFrom:
            secretKeyRef:
              name: RELEASE-NAME-artifactory-ha
              key: master-key
        - name: HA_IS_PRIMARY
          value: "false"
        - name: HA_MEMBERSHIP_PORT
          value: "10017"
        - name: HA_NODE_ID
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: ART_PRIMARY_BASE_URL
          value: 'http://RELEASE-NAME-artifactory-ha-primary:8081/artifactory'
        ports:
        - containerPort: 8081
        volumeMounts:
        - name: volume
          mountPath: "/var/opt/jfrog/artifactory"
        - name: binarystore-xml
          mountPath: "/artifactory_extra_conf/binarystore.xml"
          subPath: binarystore.xml
        resources:
          {}
          
        readinessProbe:
          httpGet:
            path: '/artifactory/webapp/#/login'
            port: 8081
          initialDelaySeconds: 60
          periodSeconds: 10
          timeoutSeconds: 10
          failureThreshold: 10
          successThreshold: 1
        livenessProbe:
          httpGet:
            path: '/artifactory/webapp/#/login'
            port: 8081
          initialDelaySeconds: 180
          periodSeconds: 10
          timeoutSeconds: 10
          failureThreshold: 10
          successThreshold: 1
      volumes:
      - name: binarystore-xml
        configMap:
          name: RELEASE-NAME-artifactory-ha-bs
  volumeClaimTemplates:
  - metadata:
      name: volume
    spec:
      accessModes: [ "ReadWriteOnce" ]
      resources:
        requests:
          storage: 200Gi

---
# Source: artifactory-ha/templates/artifactory-primary-statefulset.yaml
apiVersion: apps/v1beta2
kind: StatefulSet
metadata:
  name: RELEASE-NAME-artifactory-ha-primary
  labels:
    app: artifactory-ha
    chart: artifactory-ha-0.4.1
    component: artifactory-ha
    heritage: Tiller
    release: RELEASE-NAME
spec:
  serviceName: RELEASE-NAME-artifactory-ha-primary
  replicas: 1
  updateStrategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app: artifactory-ha
      role: RELEASE-NAME-artifactory-ha-primary
      release: RELEASE-NAME
  template:
    metadata:
      labels:
        app: artifactory-ha
        role: RELEASE-NAME-artifactory-ha-primary
        component: artifactory-ha
        release: RELEASE-NAME
    spec:
      serviceAccountName: RELEASE-NAME-artifactory-ha
      securityContext:
        runAsUser: 1030
        fsGroup: 1030
      initContainers:
      - name: "remove-lost-found"
        image: "alpine:3.6"
        imagePullPolicy: IfNotPresent
        command:
        - 'sh'
        - '-c'
        - 'rm -rfv /var/opt/jfrog/artifactory/lost+found'
        volumeMounts:
        - mountPath: "/var/opt/jfrog/artifactory"
          name: volume
      - name: "wait-for-db"
        image: "alpine:3.6"
        command:
        - 'sh'
        - '-c'
        - >
          until nc -z -w 2 RELEASE-NAME-postgresql 5432 && echo database ok; do
            sleep 2;
          done;
      containers:
      - name: artifactory-ha
        image: 'docker.bintray.io/jfrog/artifactory-pro:6.2.0'
        imagePullPolicy: IfNotPresent
        securityContext:
          allowPrivilegeEscalation: false
        lifecycle:
          postStart:
            exec:
              command:
              - '/bin/sh'
              - '-c'
              - >
        env:
        - name: DB_TYPE
          value: 'postgresql'
        - name: DB_HOST
          value: 'RELEASE-NAME-postgresql'
        - name: DB_PORT
          value: '5432'
        - name: DB_USER
          value: 'artifactory'
        - name: DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: RELEASE-NAME-postgresql
              key: postgres-password
        - name: EXTRA_JAVA_OPTIONS
          value: "
          -Dartifactory.locking.provider.type=db
            "
        - name: ARTIFACTORY_MASTER_KEY
          valueFrom:
            secretKeyRef:
              name: RELEASE-NAME-artifactory-ha
              key: master-key
        - name: HA_IS_PRIMARY
          value: "true"
        - name: HA_MEMBERSHIP_PORT
          value: "10017"
        - name: HA_NODE_ID
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        ports:
        - containerPort: 8081
        volumeMounts:
        - name: volume
          mountPath: "/var/opt/jfrog/artifactory"
        - name: artifactory-inactiveservercleaner
          mountPath: "/tmp/plugins/inactiveServerCleaner.groovy"
          subPath: inactiveServerCleaner.groovy
        - name: binarystore-xml
          mountPath: "/artifactory_extra_conf/binarystore.xml"
          subPath: binarystore.xml
        resources:
          {}
          
        readinessProbe:
          httpGet:
            path: '/artifactory/webapp/#/login'
            port: 8081
          initialDelaySeconds: 60
          periodSeconds: 10
          timeoutSeconds: 10
          failureThreshold: 10
          successThreshold: 1
        livenessProbe:
          httpGet:
            path: '/artifactory/webapp/#/login'
            port: 8081
          initialDelaySeconds: 180
          periodSeconds: 10
          timeoutSeconds: 10
          failureThreshold: 10
          successThreshold: 1
      volumes:
      - name: binarystore-xml
        configMap:
          name: RELEASE-NAME-artifactory-ha-bs
      - name: artifactory-inactiveservercleaner
        configMap:
          name: RELEASE-NAME-artifactory-ha-isc
  volumeClaimTemplates:
  - metadata:
      name: volume
    spec:
      accessModes: [ "ReadWriteOnce" ]
      resources:
        requests:
          storage: 200Gi

---
# Source: artifactory-ha/charts/postgresql/templates/networkpolicy.yaml


---
# Source: artifactory-ha/templates/artifactory-nfs-pvc.yaml

---
# Source: artifactory-ha/templates/ingress.yaml

---
# Source: artifactory-ha/templates/nginx-pvc.yaml


---
# Source: artifactory-ha/templates/nginx-replicator-conf.yaml

---
# Source: artifactory-ha/templates/replicator-configmap.yaml


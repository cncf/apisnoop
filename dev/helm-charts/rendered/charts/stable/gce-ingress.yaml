---
# Source: gce-ingress/templates/config-map.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: RELEASE-NAME-gce-ingress
  labels:
    app: gce-ingress
    chart: gce-ingress-1.0.0
    release: RELEASE-NAME
    heritage: Tiller
data:
  gce.conf: |
    [global]
    token-url = nil
    project-id = 
    network = 
    subnetwork = 
    node-instance-prefix = 
    node-tags = 
---
# Source: gce-ingress/templates/rbac.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: RELEASE-NAME-gce-ingress
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: RELEASE-NAME-gce-ingress
rules:
- apiGroups: [""]
  resources: ["secrets", "endpoints", "services", "pods", "nodes", "namespaces", "configmaps", "events"]
  verbs: ["get", "list", "watch", "update", "create", "patch"]
- apiGroups: ["extensions"]
  resources: ["ingresses"]
  verbs: ["get", "list", "watch", "update"]
- apiGroups: ["extensions"]
  resources: ["ingresses/status"]
  verbs: ["update"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: RELEASE-NAME-gce-ingress
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: RELEASE-NAME-gce-ingress
subjects:
- kind: ServiceAccount
  name: RELEASE-NAME-gce-ingress
  namespace: hub

---
# Source: gce-ingress/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: RELEASE-NAME-gce-ingress
  labels:
    app: gce-ingress
    chart: gce-ingress-1.0.0
    release: RELEASE-NAME
    heritage: Tiller
    k8s-app: glbc
    kubernetes.io/cluster-service: "true"
    addonmanager.kubernetes.io/mode: Reconcile
    kubernetes.io/name: "GLBCDefaultBackend"
spec:
  type: NodePort
  ports:
    - port: 80
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app: gce-ingress
    release: RELEASE-NAME

  name: default-http-backend
  namespace: kube-system
  labels:
    k8s-app: glbc
    kubernetes.io/cluster-service: "true"
    addonmanager.kubernetes.io/mode: Reconcile
    kubernetes.io/name: "GLBCDefaultBackend"

---
# Source: gce-ingress/templates/deployment-backend.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: RELEASE-NAME-gce-ingress-backend
  labels:
    app: gce-ingress-backend
    chart: gce-ingress-1.0.0
    release: RELEASE-NAME
    heritage: Tiller
    kubernetes.io/name: "GLBC"
    kubernetes.io/cluster-service: "true"
    addonmanager.kubernetes.io/mode: Reconcile
spec:
  replicas: 1
  selector:
    matchLabels:
      app: gce-ingress-backend
      release: RELEASE-NAME
  template:
    metadata:
      labels:
        app: gce-ingress-backend
        release: RELEASE-NAME
    spec:
      containers:
        - name: backend
          image: "k8s.gcr.io/defaultbackend:1.4"
          imagePullPolicy: IfNotPresent
          livenessProbe:
            httpGet:
              path: /healthz
              port: http
              scheme: HTTP
          readinessProbe:
            httpGet:
              path: /healthz
              port: http
              scheme: HTTP
            initialDelaySeconds: 30
            timeoutSeconds: 5
          ports:
            - name: http
              containerPort: 8080
          resources:
            {}
            

---
# Source: gce-ingress/templates/deployment-controller.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: RELEASE-NAME-gce-ingress
  labels:
    app: gce-ingress
    chart: gce-ingress-1.0.0
    release: RELEASE-NAME
    heritage: Tiller
spec:
  replicas: 1
  selector:
    matchLabels:
      app: gce-ingress
      release: RELEASE-NAME
  template:
    metadata:
      labels:
        app: gce-ingress
        release: RELEASE-NAME
    spec:
      terminationGracePeriodSeconds: 600
      hostNetwork: true
      containers:
        - name: gce-ingress
          image: "k8s.gcr.io/ingress-gce-glbc-amd64:v1.1.1"
          imagePullPolicy: IfNotPresent
          livenessProbe:
            httpGet:
              path: /healthz
              port: 8086
              scheme: HTTP
            initialDelaySeconds: 30
            # healthz reaches out to GCE
            periodSeconds: 30
            timeoutSeconds: 15
            successThreshold: 1
            failureThreshold: 5
          volumeMounts:
            - name: gce-config-volume
              mountPath: /etc/gce/
          command:
            - sh
            - -c
            - 'exec /glbc --gce-ratelimit=ga.Operations.Get,qps,10,100 --gce-ratelimit=alpha.Operations.Get,qps,10,100 --gce-ratelimit=ga.BackendServices.Get,qps,1.8,1 --gce-ratelimit=ga.HealthChecks.Get,qps,1.8,1 --gce-ratelimit=alpha.HealthChecks.Get,qps,1.8,1 --verbose --default-backend-service=hub/RELEASE-NAME-gce-ingress --sync-period=600s --running-in-cluster=true --use-real-cloud=true --config-file-path=/etc/gce/gce.conf --healthz-port=8086 2>&1'
          resources:
            {}
            
      volumes:
        - name: gce-config-volume
          configMap:
            name: RELEASE-NAME-gce-ingress
            items:
            - key: gce.conf
              path: gce.conf


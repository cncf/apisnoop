---
# Source: coredns/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: RELEASE-NAME-coredns
  labels:
    heritage: "Tiller"
    release: "RELEASE-NAME"
    chart: "coredns-1.2.0"
    k8s-app: "coredns"
    kubernetes.io/cluster-service: "true"
    kubernetes.io/name: "CoreDNS"
    app: coredns
data:
  Corefile: |-
    .:53 {
        cache 30
        errors
        health
        kubernetes cluster.local
        loadbalance round_robin
        prometheus 0.0.0.0:9153
        proxy . /etc/resolv.conf
    }
    

---
# Source: coredns/templates/clusterrole.yaml

apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: RELEASE-NAME-coredns
  labels:
    heritage: "Tiller"
    release: "RELEASE-NAME"
    chart: "coredns-1.2.0"
    k8s-app: "coredns"
    kubernetes.io/cluster-service: "true"
    kubernetes.io/name: "CoreDNS"
    app: coredns
rules:
- apiGroups:
  - ""
  resources:
  - endpoints
  - services
  - pods
  - namespaces
  verbs:
  - list
  - watch

---
# Source: coredns/templates/clusterrolebinding.yaml

apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: RELEASE-NAME-coredns
  labels:
    heritage: "Tiller"
    release: "RELEASE-NAME"
    chart: "coredns-1.2.0"
    k8s-app: "coredns"
    kubernetes.io/cluster-service: "true"
    kubernetes.io/name: "CoreDNS"
    app: coredns
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: RELEASE-NAME-coredns
subjects:
- kind: ServiceAccount
  name: RELEASE-NAME-coredns
  namespace: hub

---
# Source: coredns/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: RELEASE-NAME-coredns
  labels:
    heritage: "Tiller"
    release: "RELEASE-NAME"
    chart: "coredns-1.2.0"
    k8s-app: "coredns"
    kubernetes.io/cluster-service: "true"
    kubernetes.io/name: "CoreDNS"
    app: coredns
  annotations:
    prometheus.io/port: "9153"
    prometheus.io/scrape: "true"
    
spec:
  selector:
    release: "RELEASE-NAME"
    k8s-app: "coredns"
    app: coredns
  ports:
  - {port: 53, protocol: UDP}
  type: ClusterIP

---
# Source: coredns/templates/deployment.yaml
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: RELEASE-NAME-coredns
  labels:
    heritage: "Tiller"
    release: "RELEASE-NAME"
    chart: "coredns-1.2.0"
    k8s-app: "coredns"
    kubernetes.io/cluster-service: "true"
    kubernetes.io/name: "CoreDNS"
    app: coredns
spec:
  replicas: 1
  selector:
    matchLabels:
      release: "RELEASE-NAME"
      k8s-app: "coredns"
      app: coredns
  template:
    metadata:
      labels:
        k8s-app: "coredns"
        app: coredns
        release: "RELEASE-NAME"
      annotations:
        checksum/config: e62f900327c20b6ee6b309e629cbabacad947d0aa5d8884a4a08b389fd1b2d29
        scheduler.alpha.kubernetes.io/critical-pod: ''
        scheduler.alpha.kubernetes.io/tolerations: '[{"key":"CriticalAddonsOnly", "operator":"Exists"}]'
    spec:
      serviceAccountName: default
      dnsPolicy: Default
      containers:
      - name: "coredns"
        image: "coredns/coredns:1.2.6"
        imagePullPolicy: IfNotPresent
        args: [ "-conf", "/etc/coredns/Corefile" ]
        volumeMounts:
        - name: config-volume
          mountPath: /etc/coredns
        resources:
          limits:
            cpu: 100m
            memory: 128Mi
          requests:
            cpu: 100m
            memory: 128Mi
          
        ports:
        - {containerPort: 53, protocol: UDP}
        
        livenessProbe:
          httpGet:
            path: /health
            port: 8080
            scheme: HTTP
          initialDelaySeconds: 60
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 5
      volumes:
        - name: config-volume
          configMap:
            name: RELEASE-NAME-coredns
            items:
            - key: Corefile
              path: Corefile
            

---
# Source: coredns/templates/podsecuritypolicy.yaml


---
# Source: coredns/templates/serviceaccount.yaml



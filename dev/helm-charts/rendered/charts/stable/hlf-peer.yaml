---
# Source: hlf-peer/templates/configmap--peer.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: RELEASE-NAME-hlf-peer--peer
  labels:
    app: hlf-peer
    heritage: "Tiller"
    release: "RELEASE-NAME"
    chart: hlf-peer-1.2.4
data:
  CORE_PEER_ADDRESSAUTODETECT: "true"
  CORE_PEER_NETWORKID: nid1
  # If we have an ingress, we set hostname to it
  CORE_PEER_ADDRESS: RELEASE-NAME-hlf-peer:7051
  CORE_PEER_LISTENADDRESS: 0.0.0.0:7051
  CORE_PEER_EVENTS_ADDRESS: 0.0.0.0:7053
  CORE_PEER_COMMITTER_ENABLED: "true"
  CORE_PEER_PROFILE_ENABLED: "true"
  CORE_PEER_DISCOVERY_PERIOD: 60s
  CORE_PEER_DISCOVERY_TOUCHPERIOD: 60s
  CORE_PEER_LOCALMSPID: "Org1MSP"
  CORE_PEER_MSPCONFIGPATH: /var/hyperledger/msp
  ###########
  # Logging #
  ###########
  CORE_LOGGING_LEVEL: debug
  CORE_LOGGING_PEER: debug
  CORE_LOGGING_CAUTHDSL: debug
  CORE_LOGGING_GOSSIP: debug
  CORE_LOGGING_LEDGER: debug
  CORE_LOGGING_MSP: info
  CORE_LOGGING_POLICIES: debug
  CORE_LOGGING_GRPC: debug
  ##########
  # Gossip #
  ##########
  CORE_PEER_GOSSIP_BOOTSTRAP: ""
  CORE_PEER_GOSSIP_ENDPOINT: ""
  CORE_PEER_GOSSIP_EXTERNALENDPOINT: ""
  CORE_PEER_GOSSIP_ORGLEADER: "false"
  CORE_PEER_GOSSIP_USELEADERELECTION: "true"
  ##########
  # TLS    #
  ##########
  CORE_PEER_TLS_ENABLED: "false"
  CORE_PEER_TLS_CERT_FILE: "/var/hyperledger/tls/server/pair/tls.crt"
  CORE_PEER_TLS_KEY_FILE: "/var/hyperledger/tls/server/pair/tls.key"
  CORE_PEER_TLS_ROOTCERT_FILE: "/var/hyperledger/tls/server/cert/cacert.pem"
  CORE_PEER_TLS_CLIENTAUTHREQUIRED: "false"
  # This is fixed prior to starting the peer
  CORE_PEER_TLS_CLIENTROOTCAS_FILES: "/var/hyperledger/tls/client/cert/*"
  CORE_PEER_TLS_CLIENTCERT_FILE: "/var/hyperledger/tls/client/pair/tls.crt"
  CORE_PEER_TLS_CLIENTKEY_FILE: "/var/hyperledger/tls/client/pair/tls.key"
  CORE_VM_ENDPOINT: unix:///host/var/run/docker.sock
  CORE_LEDGER_STATE_STATEDATABASE: "goleveldb"
  # Containers in the same pod share the host
  PEER_CFG_PATH: /var/hyperledger/config
  FABRIC_CFG_PATH: /var/hyperledger/fabric_cfg
  GODEBUG: "netdns=go"
  ADMIN_MSP_PATH: /var/hyperledger/admin_msp
  ORD_TLS_PATH: /var/hyperledger/tls/ord/cert

---
# Source: hlf-peer/templates/pvc.yaml

kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: RELEASE-NAME-hlf-peer
  labels:
    app: hlf-peer
    heritage: "Tiller"
    release: "RELEASE-NAME"
    chart: hlf-peer-1.2.4
spec:
  accessModes:
    - "ReadWriteOnce"
  resources:
    requests:
      storage: "1Gi"

---
# Source: hlf-peer/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: RELEASE-NAME-hlf-peer
  labels:
    app: hlf-peer
    heritage: "Tiller"
    release: "RELEASE-NAME"
    chart: hlf-peer-1.2.4
spec:
  type: ClusterIP
  ports:
    - port: 7051
      targetPort: 7051
      protocol: TCP
      name: request
    - port: 7053
      targetPort: 7053
      protocol: TCP
      name: event
  selector:
    app: hlf-peer
    release: RELEASE-NAME

---
# Source: hlf-peer/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: RELEASE-NAME-hlf-peer
  labels:
    app: hlf-peer
    heritage: "Tiller"
    release: "RELEASE-NAME"
    chart: hlf-peer-1.2.4
spec:
  replicas: 1
  selector:
    matchLabels:
      app: hlf-peer
      release: RELEASE-NAME
  # Ensure we allow our pod to be unavailable, so we can upgrade
  strategy:
    rollingUpdate:
      maxUnavailable: 1
  template:
    metadata:
      labels:
        app: hlf-peer
        heritage: "Tiller"
        release: "RELEASE-NAME"
        chart: hlf-peer-1.2.4
    spec:
      volumes:
        - name: data
          persistentVolumeClaim:
            claimName: RELEASE-NAME-hlf-peer
        - name: dockersocket
          hostPath:
            path: /var/run/docker.sock
      containers:
        - name: peer
          image: "hyperledger/fabric-peer:1.3.0"
          imagePullPolicy: IfNotPresent
          ports:
            - name: request
              containerPort: 7051
              protocol: TCP
            - name: event
              containerPort: 7053
              protocol: TCP
          livenessProbe:
            exec:
              command:
              - ls
              - /var/hyperledger
            initialDelaySeconds: 5
            periodSeconds: 5
          # TODO: Improve readiness probe (ideally `ps aux | awk '$11=="orderer"'`)
          readinessProbe:
            exec:
              command:
              - ls
              - /var/hyperledger
            initialDelaySeconds: 15
          command:
            - bash
            - -c
            - |
              # To avoid having separate secrets for CouchDB and HLF
              export CORE_LEDGER_STATE_COUCHDBCONFIG_USERNAME=$COUCHDB_USER
              export CORE_LEDGER_STATE_COUCHDBCONFIG_PASSWORD=$COUCHDB_PASSWORD

              while [ ! -d /var/hyperledger/admin_msp/admincerts ] || [ -z "$(ls -A /var/hyperledger/admin_msp/admincerts)" ];
              do
                echo "\033[0;31m /var/hyperledger/admin_msp/admincerts must contain Peer admin certificates files \033[0m"
                sleep 60
              done

              while [ ! -d ${CORE_PEER_MSPCONFIGPATH}/signcerts ];
              do
                echo "\033[0;31m ${CORE_PEER_MSPCONFIGPATH}/signcerts directory must exist \033[0m"
                sleep 60
              done

              if [ ! -d ${FABRIC_CFG_PATH} ]
              then
                mkdir -p ${FABRIC_CFG_PATH}
                cp -r /etc/hyperledger/fabric/core.yaml ${FABRIC_CFG_PATH}
                ls ${FABRIC_CFG_PATH}
              fi

              if [ $CORE_PEER_TLS_CLIENTAUTHREQUIRED ]
              then
                export CORE_PEER_TLS_CLIENTROOTCAS_FILES=$(ls -d $CORE_PEER_TLS_CLIENTROOTCAS_FILES)
              fi

              echo ">\033[0;35m peer node start \033[0m"
              peer node start
          envFrom:
            - configMapRef:
                name: RELEASE-NAME-hlf-peer--peer
          volumeMounts:
            - mountPath: /var/hyperledger
              name: data
            - mountPath: /host/var/run/docker.sock
              name: dockersocket
          resources:
            {}
            

---
# Source: hlf-peer/templates/ingress.yaml



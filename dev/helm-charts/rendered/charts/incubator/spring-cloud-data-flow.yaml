---
# Source: spring-cloud-data-flow/charts/mysql/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: RELEASE-NAME-mysql
  labels:
    app: RELEASE-NAME-mysql
    chart: "mysql-0.3.4"
    release: "RELEASE-NAME"
    heritage: "Tiller"
type: Opaque
data:
  
  mysql-root-password: "cWVSbkNiM2dMUw=="
  
  
  mysql-password: "dlY2NGpuWU1iVA=="
  

---
# Source: spring-cloud-data-flow/charts/rabbitmq/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: RELEASE-NAME-rabbitmq
  labels:
    app: RELEASE-NAME-rabbitmq
    chart: "rabbitmq-0.6.16"
    release: "RELEASE-NAME"
    heritage: "Tiller"
type: Opaque
data:
  
  rabbitmq-password: "YWx1SlJhc1Jhbg=="
  
  
  rabbitmq-erlang-cookie: "TFg1aEZFZnVmN0JTbWloR1hMREREbzVlNFd3ek90MWU="
  

---
# Source: spring-cloud-data-flow/charts/redis/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: RELEASE-NAME-redis
  labels:
    app: RELEASE-NAME-redis
    chart: "redis-1.1.11"
    release: "RELEASE-NAME"
    heritage: "Tiller"
type: Opaque
data:
  redis-password: "RTRwZk9ocWpMbg=="
---
# Source: spring-cloud-data-flow/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: RELEASE-NAME-data-flow
  labels:
    app: spring-cloud-data-flow
    chart: "spring-cloud-data-flow-0.2.7"
    release: "RELEASE-NAME"
    heritage: "Tiller"
type: Opaque
data:
  data-flow-admin-password: "YWRtaW4="
  data-flow-password: "cGFzc3dvcmQ="

---
# Source: spring-cloud-data-flow/templates/server-config-rabbit.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: RELEASE-NAME-data-flow-server
  labels:
    app: spring-cloud-data-flow
    component: server
    chart: "spring-cloud-data-flow-0.2.7"
    release: "RELEASE-NAME"
    heritage: "Tiller"
data:
  application.yaml: |-
    security:
      basic:
        enabled: true
        realm: Spring Cloud Data Flow
    spring:
      cloud:
        dataflow:
          security:
            authentication:
              file:
                enabled: true
                users:
                  admin: ${data-flow-admin-password}, ROLE_MANAGE, ROLE_VIEW
                  user: ${data-flow-password}, ROLE_VIEW, ROLE_CREATE
        deployer:
          kubernetes:
            environmentVariables: 'SPRING_RABBITMQ_HOST=${RELEASE_NAME_RABBITMQ_SERVICE_HOST},SPRING_RABBITMQ_PORT=${RELEASE_NAME_RABBITMQ_SERVICE_PORT_AMQP},SPRING_RABBITMQ_USERNAME=user,SPRING_RABBITMQ_PASSWORD=${rabbitmq-password},SPRING_REDIS_HOST=${RELEASE_NAME_REDIS_SERVICE_HOST},SPRING_REDIS_PORT=${RELEASE_NAME_REDIS_SERVICE_PORT},SPRING_REDIS_PASSWORD=${redis-password}'
      datasource:
        url: 'jdbc:mysql://${RELEASE_NAME_MYSQL_SERVICE_HOST}:3306/dataflow'
        driverClassName: org.mariadb.jdbc.Driver
        username: root
        password: ${mysql-root-password}
        testOnBorrow: true
        validationQuery: "SELECT 1"
      redis:
        host: ${RELEASE_NAME_REDIS_SERVICE_HOST}
        port: ${RELEASE_NAME_REDIS_SERVICE_PORT}
        password: ${redis-password}

---
# Source: spring-cloud-data-flow/templates/skipper-config.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: RELEASE-NAME-data-flow-skipper
  labels:
    app: spring-cloud-data-flow
    component: skipper
    chart: "spring-cloud-data-flow-0.2.7"
    release: "RELEASE-NAME"
    heritage: "Tiller"
data:
  spring.application.json: '{"spring.cloud.skipper.server.enableLocalPlatform" : false, "spring.cloud.skipper.server.platform.kubernetes.accounts.minikube.environmentVariables" : "SPRING_RABBITMQ_HOST=${RELEASE_NAME_RABBITMQ_SERVICE_HOST},SPRING_RABBITMQ_PORT=${RELEASE_NAME_RABBITMQ_SERVICE_PORT_AMQP},SPRING_RABBITMQ_USERNAME=user,SPRING_RABBITMQ_PASSWORD=${RABBITMQ_PASSWORD}","spring.cloud.skipper.server.platform.kubernetes.accounts.minikube.memory" : "1024Mi","spring.cloud.skipper.server.platform.kubernetes.accounts.minikube.cpu" : "500m","spring.cloud.skipper.server.platform.kubernetes.accounts.minikube.createDeployment" : true}'

---
# Source: spring-cloud-data-flow/charts/mysql/templates/pvc.yaml

kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: RELEASE-NAME-mysql
  labels:
    app: RELEASE-NAME-mysql
    chart: "mysql-0.3.4"
    release: "RELEASE-NAME"
    heritage: "Tiller"
spec:
  accessModes:
    - "ReadWriteOnce"
  resources:
    requests:
      storage: "8Gi"

---
# Source: spring-cloud-data-flow/charts/rabbitmq/templates/pvc.yaml

kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: RELEASE-NAME-rabbitmq
spec:
  accessModes:
    - "ReadWriteOnce"
  resources:
    requests:
      storage: "8Gi"

---
# Source: spring-cloud-data-flow/charts/redis/templates/pvc.yaml

kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: RELEASE-NAME-redis
  labels:
    app: RELEASE-NAME-redis
    chart: "redis-1.1.11"
    release: "RELEASE-NAME"
    heritage: "Tiller"
spec:
  accessModes:
    - "ReadWriteOnce"
  resources:
    requests:
      storage: "8Gi"

---
# Source: spring-cloud-data-flow/templates/service-account.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: RELEASE-NAME-data-flow
  labels:
    app: spring-cloud-data-flow
    chart: "spring-cloud-data-flow-0.2.7"
    release: "RELEASE-NAME"
    heritage: "Tiller"
---
# Source: spring-cloud-data-flow/templates/server-rbac.yaml
kind: Role
apiVersion: rbac.authorization.k8s.io/v1beta1
metadata:
  name: RELEASE-NAME-data-flow
  labels:
    app: spring-cloud-data-flow
    chart: "spring-cloud-data-flow-0.2.7"
    release: "RELEASE-NAME"
    heritage: "Tiller"
rules:
  - apiGroups: [""]
    resources: ["services", "pods", "replicationcontrollers", "persistentvolumeclaims"]
    verbs: ["get", "list", "watch", "create", "delete", "update"]
  - apiGroups: [""]
    resources: ["configmaps", "secrets"]
    verbs: ["get", "list", "watch"]
  - apiGroups: ["apps"]
    resources: ["statefulsets"]
    verbs: ["get", "list", "watch", "create", "delete", "update"]
  - apiGroups: ["extensions"]
    resources: ["deployments", "replicasets", "jobs"]
    verbs: ["get", "list", "watch", "create", "delete", "update", "patch"]
---
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1beta1
metadata:
  name: RELEASE-NAME-data-flow
  labels:
    app: spring-cloud-data-flow
    chart: "spring-cloud-data-flow-0.2.7"
    release: "RELEASE-NAME"
    heritage: "Tiller"
roleRef:
  kind: Role
  name: RELEASE-NAME-data-flow
  apiGroup: rbac.authorization.k8s.io
subjects:
- kind: ServiceAccount
  name: RELEASE-NAME-data-flow
---
# Source: spring-cloud-data-flow/charts/mysql/templates/svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: RELEASE-NAME-mysql
  labels:
    app: RELEASE-NAME-mysql
    chart: "mysql-0.3.4"
    release: "RELEASE-NAME"
    heritage: "Tiller"
spec:
  type: ClusterIP
  ports:
  - name: mysql
    port: 3306
    targetPort: mysql
  selector:
    app: RELEASE-NAME-mysql

---
# Source: spring-cloud-data-flow/charts/rabbitmq/templates/svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: RELEASE-NAME-rabbitmq
  labels:
    app: RELEASE-NAME-rabbitmq
    chart: "rabbitmq-0.6.16"
    release: "RELEASE-NAME"
    heritage: "Tiller"
spec:
  type: ClusterIP
  ports:
  - name: epmd
    port: 4369
    targetPort: epmd
  - name: amqp
    port: 5672
    targetPort: amqp
  - name: dist
    port: 25672
    targetPort: dist
  - name: stats
    port: 15672
    targetPort: stats
  selector:
    app: RELEASE-NAME-rabbitmq

---
# Source: spring-cloud-data-flow/charts/redis/templates/svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: RELEASE-NAME-redis
  labels:
    app: RELEASE-NAME-redis
    chart: "redis-1.1.11"
    release: "RELEASE-NAME"
    heritage: "Tiller"
  annotations:
spec:
  type: ClusterIP
  ports:
  - name: redis
    port: 6379
    targetPort: redis
  selector:
    app: RELEASE-NAME-redis

---
# Source: spring-cloud-data-flow/templates/metrics-service.yaml
kind: Service
apiVersion: v1
metadata:
  name: RELEASE-NAME-data-flow-metrics
  labels:
    app: spring-cloud-data-flow
    component: metrics
    chart: "spring-cloud-data-flow-0.2.7"
    release: "RELEASE-NAME"
    heritage: "Tiller"
spec:
  type: ClusterIP
  ports:
    - port: 80
      targetPort: http
      name: http
  selector:
    app: spring-cloud-data-flow
    component: metrics
    release: RELEASE-NAME

---
# Source: spring-cloud-data-flow/templates/server-service.yaml
kind: Service
apiVersion: v1
metadata:
  name: RELEASE-NAME-data-flow-server
  labels:
    app: spring-cloud-data-flow
    component: server
    chart: "spring-cloud-data-flow-0.2.7"
    release: "RELEASE-NAME"
    heritage: "Tiller"
spec:
  # If you are running k8s on a local dev box, you can use type NodePort instead
  type: LoadBalancer
  ports:
    - port: 80
      targetPort: http
      name: http
  selector:
    app: spring-cloud-data-flow
    component: server
    release: RELEASE-NAME

---
# Source: spring-cloud-data-flow/templates/skipper-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: RELEASE-NAME-data-flow-skipper
  labels:
    app: spring-cloud-data-flow
    component: skipper
    chart: "spring-cloud-data-flow-0.2.7"
    release: "RELEASE-NAME"
    heritage: "Tiller"
spec:
  type: ClusterIP
  ports:
    - port: 80
      targetPort: http
      name: http
  selector:
    app: spring-cloud-data-flow
    component: skipper
    release: RELEASE-NAME

---
# Source: spring-cloud-data-flow/charts/mysql/templates/deployment.yaml
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: RELEASE-NAME-mysql
  labels:
    app: RELEASE-NAME-mysql
    chart: "mysql-0.3.4"
    release: "RELEASE-NAME"
    heritage: "Tiller"
spec:
  template:
    metadata:
      labels:
        app: RELEASE-NAME-mysql
    spec:
      initContainers:
      - name: "remove-lost-found"
        image: "busybox:1.25.0"
        imagePullPolicy: "IfNotPresent"
        command:  ["rm", "-fr", "/var/lib/mysql/lost+found"]
        volumeMounts:
        - name: data
          mountPath: /var/lib/mysql
      containers:
      - name: RELEASE-NAME-mysql
        image: "mysql:5.7.14"
        imagePullPolicy: "IfNotPresent"
        resources:
          requests:
            cpu: 100m
            memory: 256Mi
          
        env:
        - name: MYSQL_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: RELEASE-NAME-mysql
              key: mysql-root-password
        - name: MYSQL_PASSWORD
          valueFrom:
            secretKeyRef:
              name: RELEASE-NAME-mysql
              key: mysql-password
        - name: MYSQL_USER
          value: ""
        - name: MYSQL_DATABASE
          value: "dataflow"
        ports:
        - name: mysql
          containerPort: 3306
        livenessProbe:
          exec:
            command:
            - sh
            - -c
            - "mysqladmin ping -u root -p${MYSQL_ROOT_PASSWORD}"
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 3
        readinessProbe:
          exec:
            command:
            - sh
            - -c
            - "mysqladmin ping -u root -p${MYSQL_ROOT_PASSWORD}"
          initialDelaySeconds: 5
          periodSeconds: 10
          timeoutSeconds: 1
          successThreshold: 1
          failureThreshold: 3
        volumeMounts:
        - name: data
          mountPath: /var/lib/mysql
      volumes:
      - name: data
        persistentVolumeClaim:
          claimName: RELEASE-NAME-mysql
---
# Source: spring-cloud-data-flow/charts/rabbitmq/templates/deployment.yaml
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: RELEASE-NAME-rabbitmq
  labels:
    app: RELEASE-NAME-rabbitmq
    chart: "rabbitmq-0.6.16"
    release: "RELEASE-NAME"
    heritage: "Tiller"
spec:
  template:
    metadata:
      labels:
        app: RELEASE-NAME-rabbitmq
    spec:
      containers:
      - name: RELEASE-NAME-rabbitmq
        image: "bitnami/rabbitmq:3.7.2-r1"
        imagePullPolicy: ""
        env:
        - name: RABBITMQ_USERNAME
          value: "user"
        - name: RABBITMQ_PASSWORD
          valueFrom:
            secretKeyRef:
              name: RELEASE-NAME-rabbitmq
              key: rabbitmq-password
        - name: RABBITMQ_ERL_COOKIE
          valueFrom:
            secretKeyRef:
              name: RELEASE-NAME-rabbitmq
              key: rabbitmq-erlang-cookie
        - name: RABBITMQ_NODE_PORT_NUMBER
          value: "5672"
        - name: RABBITMQ_NODE_TYPE
          value: "stats"
        - name: RABBITMQ_NODE_NAME
          value: "rabbit@localhost"
        - name: RABBITMQ_CLUSTER_NODE_NAME
          value: ""
        - name: RABBITMQ_DEFAULT_VHOST
          value: "/"
        - name: RABBITMQ_MANAGER_PORT_NUMBER
          value: "15672"
        - name: RABBITMQ_DISK_FREE_LIMIT
          value: "\"6GiB\""
        ports:
        - name: epmd
          containerPort: 4369
        - name: amqp
          containerPort: 5672
        - name: dist
          containerPort: 25672
        - name: stats
          containerPort: 15672
        livenessProbe:
          exec:
            command:
            - rabbitmqctl
            - status
          initialDelaySeconds: 120
          timeoutSeconds: 5
          failureThreshold: 6
        readinessProbe:
          exec:
            command:
            - rabbitmqctl
            - status
          initialDelaySeconds: 10
          timeoutSeconds: 3
          periodSeconds: 5
        volumeMounts:
        - name: data
          mountPath: /bitnami/rabbitmq
        resources:
          requests:
            cpu: 100m
            memory: 256Mi
          
      volumes:
      - name: data
        persistentVolumeClaim:
          claimName: RELEASE-NAME-rabbitmq
---
# Source: spring-cloud-data-flow/charts/redis/templates/deployment.yaml
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: RELEASE-NAME-redis
  labels:
    app: RELEASE-NAME-redis
    chart: "redis-1.1.11"
    release: "RELEASE-NAME"
    heritage: "Tiller"
spec:
  template:
    metadata:
      labels:
        app: RELEASE-NAME-redis
    spec:
      securityContext:
        fsGroup: 1001
        runAsUser: 1001
      containers:
      - name: RELEASE-NAME-redis
        image: "bitnami/redis:4.0.7-r0"
        imagePullPolicy: "IfNotPresent"
        env:
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: RELEASE-NAME-redis
              key: redis-password
        ports:
        - name: redis
          containerPort: 6379
        livenessProbe:
          exec:
            command:
            - redis-cli
            - ping
          initialDelaySeconds: 30
          timeoutSeconds: 5
        readinessProbe:
          exec:
            command:
            - redis-cli
            - ping
          initialDelaySeconds: 5
          timeoutSeconds: 1
        resources:
          requests:
            cpu: 100m
            memory: 256Mi
          
        volumeMounts:
        - name: redis-data
          mountPath: /bitnami
          subPath: 
      volumes:
      - name: redis-data
        persistentVolumeClaim:
          claimName: RELEASE-NAME-redis
---
# Source: spring-cloud-data-flow/templates/metrics-deployment-rabbit.yaml
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: RELEASE-NAME-data-flow-metrics
  labels:
    app: spring-cloud-data-flow
    component: metrics
    chart: "spring-cloud-data-flow-0.2.7"
    release: "RELEASE-NAME"
    heritage: "Tiller"
spec:
  replicas: 1
  template:
    metadata:
      labels:
        app: spring-cloud-data-flow
        component: metrics
        release: "RELEASE-NAME"
    spec:
      containers:
      - name: RELEASE-NAME-data-flow-metrics
        image: springcloud/metrics-collector-rabbit:2.0.0.RELEASE
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 8080
          name: http
        resources:
          {}
          
        livenessProbe:
          httpGet:
            path: /actuator/health
            port: http
          initialDelaySeconds: 90
          periodSeconds: 15
          timeoutSeconds: 5
        readinessProbe:
          httpGet:
            path: /actuator/health
            port: http
          initialDelaySeconds: 60
          periodSeconds: 15
          timeoutSeconds: 5
        env:
        - name: SERVER_PORT
          value: '8080'
        - name: SPRING_CLOUD_CONFIG_ENABLED
          value: 'false'
        - name: SPRING_AUTOCONFIGURE_EXCLUDE
          value: 'org.springframework.boot.autoconfigure.security.servlet.SecurityAutoConfiguration'
        - name: SPRING_RABBITMQ_HOST
          value: '${RELEASE_NAME_RABBITMQ_SERVICE_HOST}'
        - name: SPRING_RABBITMQ_PORT
          value: '${RELEASE_NAME_RABBITMQ_SERVICE_PORT_AMQP}'
        - name: SPRING_RABBITMQ_USERNAME
          value: 'user'
        - name: SPRING_RABBITMQ_PASSWORD
          valueFrom:
            secretKeyRef:
              name: RELEASE-NAME-rabbitmq
              key: rabbitmq-password
      serviceAccountName: RELEASE-NAME-data-flow

---
# Source: spring-cloud-data-flow/templates/server-deployment.yaml
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: RELEASE-NAME-data-flow-server
  labels:
    app: spring-cloud-data-flow
    component: server
    chart: "spring-cloud-data-flow-0.2.7"
    release: "RELEASE-NAME"
    heritage: "Tiller"
spec:
  replicas: 1
  template:
    metadata:
      labels:
        app: spring-cloud-data-flow
        component: server
        release: "RELEASE-NAME"
    spec:
      containers:
      - name: RELEASE-NAME-data-flow-server
        image: springcloud/spring-cloud-dataflow-server-kubernetes:1.6.2.RELEASE
        imagePullPolicy: IfNotPresent
        volumeMounts: [
          {
            name: data-flow,
            mountPath: /etc/secrets/data-flow,
            readOnly: true
          },
          {
            name: rabbitmq,
            mountPath: /etc/secrets/rabbitmq,
            readOnly: true
          },
          {
            name: mysql,
            mountPath: /etc/secrets/mysql,
            readOnly: true
          },
          {
            name: redis,
            mountPath: /etc/secrets/redis,
            readOnly: true
          }
        ]
        ports:
        - containerPort: 8080
          name: http
        resources:
          {}
          
        livenessProbe:
          httpGet:
            path: /management/health
            port: http
            httpHeaders:
            - name: Authorization
              value: 'Basic YWRtaW46YWRtaW4='
          initialDelaySeconds: 120
          periodSeconds: 15
          timeoutSeconds: 5
        readinessProbe:
          httpGet:
            path: /management/health
            port: http
            httpHeaders:
            - name: Authorization
              value: 'Basic YWRtaW46YWRtaW4='
          initialDelaySeconds: 60
          periodSeconds: 15
          timeoutSeconds: 5
        env:
        - name: KUBERNETES_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: "metadata.namespace"
        - name: SERVER_PORT
          value: '8080'
        - name: SPRING_CLOUD_CONFIG_ENABLED
          value: 'false'
        - name: SPRING_CLOUD_DATAFLOW_FEATURES_ANALYTICS_ENABLED
          value: 'true'
        - name: SPRING_CLOUD_DEPLOYER_KUBERNETES_CREATE_DEPLOYMENT
          value: 'true'
        - name: SPRING_CLOUD_DEPLOYER_KUBERNETES_CPU
          value: '500m'
        - name: SPRING_CLOUD_DEPLOYER_KUBERNETES_MEMORY
          value: '1024Mi'
        - name: SPRING_CLOUD_DEPLOYER_KUBERNETES_READINESS_PROBE_DELAY
          value: '120'
        - name: SPRING_CLOUD_DEPLOYER_KUBERNETES_LIVENESS_PROBE_DELAY
          value: '90'
        - name: SPRING_CLOUD_KUBERNETES_CONFIG_NAME
          value: RELEASE-NAME-data-flow-server
        - name: SPRING_CLOUD_KUBERNETES_SECRETS_ENABLE_API
          value: 'true'
        - name: SPRING_CLOUD_KUBERNETES_SECRETS_PATHS
          value: /etc/secrets
        - name: SPRING_CLOUD_DATAFLOW_FEATURES_SKIPPER_ENABLED
          value: 'true'
        - name: SPRING_CLOUD_SKIPPER_CLIENT_SERVER_URI
          value: 'http://${RELEASE_NAME_DATA_FLOW_SKIPPER_SERVICE_HOST}/api'
        - name: SPRING_CLOUD_DATAFLOW_METRICS_COLLECTOR_URI
          value: 'http://${RELEASE_NAME_DATA_FLOW_METRICS_SERVICE_HOST}'
        - name: SPRING_CLOUD_DATAFLOW_SERVER_URI
          value: 'http://${RELEASE_NAME_DATA_FLOW_SERVER_SERVICE_HOST}:${RELEASE_NAME_DATA_FLOW_SERVER_SERVICE_PORT}'
          # Maven repo for metadata artifact resolution plus metrics destination for all stream apps
        - name: SPRING_APPLICATION_JSON
          value: "{ \"maven\": { \"local-repository\": null, \"remote-repositories\": { \"repo1\": { \"url\": \"https://repo.spring.io/libs-snapshot\"} } }, \"spring.cloud.dataflow.application-properties.stream.spring.cloud.stream.bindings.applicationMetrics.destination\": \"metrics\" }"
      volumes: [
        {
          name: data-flow,
          secret: {
            secretName: RELEASE-NAME-data-flow
          }
        },
        {
          name: rabbitmq,
          secret: {
            secretName: RELEASE-NAME-rabbitmq
          }
        },
        {
          name: mysql,
          secret: {
            secretName: RELEASE-NAME-mysql
          }
        },
        {
          name: redis,
          secret: {
            secretName: RELEASE-NAME-redis
          }
        }
      ]
      serviceAccountName: RELEASE-NAME-data-flow

---
# Source: spring-cloud-data-flow/templates/skipper-deployment.yaml
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: RELEASE-NAME-data-flow-skipper
  labels:
    app: spring-cloud-data-flow
    component: skipper
    chart: "spring-cloud-data-flow-0.2.7"
    release: "RELEASE-NAME"
    heritage: "Tiller"
spec:
  replicas: 1
  template:
    metadata:
      labels:
        app: spring-cloud-data-flow
        component: skipper
        release: "RELEASE-NAME"
    spec:
      containers:
      - name: RELEASE-NAME-data-flow-skipper
        image: springcloud/spring-cloud-skipper-server:1.0.9.RELEASE
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 7577
          name: http
        resources:
          {}
          
        livenessProbe:
          httpGet:
            path: /api/about
            port: http
          initialDelaySeconds: 90
          periodSeconds: 15
          timeoutSeconds: 5
        readinessProbe:
          httpGet:
            path: /api/about
            port: http
          initialDelaySeconds: 30
          periodSeconds: 15
          timeoutSeconds: 5
        env:
        - name: SPRING_DATASOURCE_URL
          value: 'jdbc:mysql://${RELEASE_NAME_MYSQL_SERVICE_HOST}:3306/skipper'
        - name: SPRING_DATASOURCE_USERNAME
          value: root
        - name: SPRING_DATASOURCE_PASSWORD
          valueFrom:
            secretKeyRef:
              name: RELEASE-NAME-mysql
              key: mysql-root-password
        - name: SPRING_DATASOURCE_DRIVER_CLASS_NAME
          value: org.mariadb.jdbc.Driver
        - name: RABBITMQ_PASSWORD
          valueFrom:
            secretKeyRef:
              name: RELEASE-NAME-rabbitmq
              key: rabbitmq-password
        - name: SPRING_APPLICATION_JSON
          valueFrom:
            configMapKeyRef:
              name: RELEASE-NAME-data-flow-skipper
              key: spring.application.json
          value: 
      initContainers:
      - name: init-mysql-wait
        image: busybox
        command: ['sh', '-c', 'until nc -w3 -z RELEASE-NAME-mysql 3306; do echo waiting for mysql; sleep 3; done;']
      - name: init-mysql-database
        image: mysql:5.7.14
        env:
        - name: MYSQL_PWD
          valueFrom:
            secretKeyRef:
              name: RELEASE-NAME-mysql
              key: mysql-root-password
        command: ['sh', '-c', 'mysql -h RELEASE-NAME-mysql -u root -e "CREATE DATABASE IF NOT EXISTS skipper;"']
      serviceAccountName: RELEASE-NAME-data-flow

---
# Source: spring-cloud-data-flow/charts/mysql/templates/configmap.yaml

---
# Source: spring-cloud-data-flow/charts/redis/templates/networkpolicy.yaml



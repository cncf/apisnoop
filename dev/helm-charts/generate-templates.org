#+TITLE: Template Generator for Helm Charts
#+AUTHOR: Stephen Heywood
#+EMAIL: stephen@ii.coop
#+CREATOR: ii.coop
#+DATE: December 5ith, 2018
#+PROPERTY: header-args:shell :results output list raw replace
#+PROPERTY: header-args:tmate  :socket (symbol-value 'socket)
#+PROPERTY: header-args:tmate+ :session (user-login-name)

* Summary

This file is an interactive walkthrough for generating template files for Helm Charts.
A static analysis process will use these templates to solve a number of questions about the project.
The first being, what are the most common resources used?

#+NAME: mktemp
#+BEGIN_SRC shell :cache yes :results output code verbatim :results_switches ":tangle no :noweb-ref tmpdir"
    mktemp -d
#+END_SRC

#+RESULTS[2e7491dcba2d236dde25253fd241bbdac762fbdb]: mktemp
#+BEGIN_SRC shell :tangle no :noweb-ref tmpdir
/tmp/tmp.Fe3NzpzBKo
#+END_SRC

#+Checkout the Charts
#+BEGIN_SRC tmate :noweb yes
    cd <<tmpdir>>
    git clone https://github.com/helm/charts
#+END_SRC

#+NAME: stable_charts
#+BEGIN_SRC shell :noweb yes :results output code verbatim :wrap "SRC txt"
  cd <<tmpdir>>
  cd charts/stable
#+END_SRC

#+RESULTS: stable_charts
#+BEGIN_SRC txt
acs-engine-autoscaler
aerospike
airflow
anchore-engine
apm-server
ark
artifactory
artifactory-ha
atlantis
auditbeat
aws-cluster-autoscaler
bitcoind
bookstack
buildkite
burrow
centrifugo
cerebro
cert-manager
chaoskube
chartmuseum
chronograf
cloudserver
cluster-autoscaler
cockroachdb
concourse
consul
coredns
cosbench
coscale
dask
dask-distributed
datadog
dex
distributed-tensorflow
distribution
dmarc2logstash
docker-registry
dokuwiki
drone
drupal
efs-provisioner
elastabot
elastalert
elasticsearch
elasticsearch-curator
elasticsearch-exporter
elastic-stack
envoy
etcd-operator
ethereum
eventrouter
express-gateway
external-dns
factorio
falco
filebeat
fluent-bit
fluentd
fluentd-elasticsearch
g2
gce-ingress
gcloud-endpoints
gcloud-sqlproxy
gcp-night-king
ghost
gitlab-ce
gitlab-ee
gocd
grafana
graphite
hackmd
hadoop
hazelcast
hazelcast-jet
heapster
heartbeat
helm-exporter
hl-composer
hlf-ca
hlf-couchdb
hlf-ord
hlf-peer
home-assistant
horovod
hubot
ignite
inbucket
index.yaml
influxdb
ingressmonitorcontroller
ipfs
jaeger-operator
janusgraph
jasperreports
jenkins
joomla
k8s-spot-rescheduler
k8s-spot-termination-handler
kafka-manager
kanister-operator
kapacitor
karma
katafygio
keel
keycloak
kiam
kibana
kong
kube2iam
kubed
kubedb
kube-hunter
kube-lego
kube-ops-view
kuberhealthy
kubernetes-dashboard
kuberos
kube-slack
kube-state-metrics
kubewatch
kured
lamp
linkerd
locust
logstash
luigi
magento
magic-ip-address
magic-namespace
mailhog
mariadb
mattermost-team-edition
mcrouter
mediawiki
memcached
metabase
metallb
metricbeat
metrics-server
minecraft
minio
mission-control
mongodb
mongodb-replicaset
moodle
msoms
mssql-linux
mysql
mysqldump
namerd
nats
neo4j
newrelic-infrastructure
nfs-client-provisioner
nfs-server-provisioner
nginx-ingress
nginx-ldapauth-proxy
nginx-lego
node-problem-detector
node-red
oauth2-proxy
odoo
opa
opencart
openebs
openiban
openldap
openvpn
orangehrm
osclass
owncloud
pachyderm
parse
percona
percona-xtradb-cluster
phabricator
phpbb
phpmyadmin
postgresql
prestashop
presto
prisma
prometheus
prometheus-adapter
prometheus-blackbox-exporter
prometheus-cloudwatch-exporter
prometheus-consul-exporter
prometheus-couchdb-exporter
prometheus-mysql-exporter
prometheus-node-exporter
prometheus-operator
prometheus-postgres-exporter
prometheus-pushgateway
prometheus-rabbitmq-exporter
prometheus-redis-exporter
prometheus-to-sd
quassel
rabbitmq
rabbitmq-ha
redis
redis-ha
redmine
rethinkdb
risk-advisor
rocketchat
rookout
sapho
schema-registry-ui
sealed-secrets
searchlight
selenium
sematext-docker-agent
sensu
sentry
seq
signalfx-agent
signalsciences
sonarqube
sonatype-nexus
spark
spark-history-server
spartakus
spinnaker
spotify-docker-gc
spring-cloud-data-flow
stackdriver-exporter
stash
stellar-core
stolon
suitecrm
sumokube
sumologic-fluentd
superset
swift
sysdig
telegraf
tensorflow-notebook
tensorflow-serving
terracotta
testlink
tomcat
traefik
uchiwa
unbound
unifi
vault-operator
verdaccio
voyager
weave-cloud
weave-scope
wordpress
xray
zeppelin
zetcd
#+END_SRC

** A tale of two aliases: stable and incubator
#+NAME: Unique Repos
#+BEGIN_SRC shell :noweb yes :results output code verbatim :wrap "SRC txt"
  cd <<tmpdir>>
  grep repository charts/*/*/requirements.yaml \
    | sed 's/^.*repository: //' \
    | sed 's/"//g' \
    | sed 's:/*$::' \
    | sort \
    | uniq
#+END_SRC

#+RESULTS: Unique Repos
#+BEGIN_SRC txt
alias:stable
file://webhook
https://kubernetes-charts-incubator.storage.googleapis.com
https://kubernetes-charts.storage.googleapis.com
#+END_SRC

#+NAME: ensure alias:repo usage everywhere
#+BEGIN_SRC shell :noweb yes
  cd <<tmpdir>>
find . -name requirements.yaml -exec \
  sed -i 'sXhttps://kubernetes-charts.storage.googleapis.com/*Xalias:stableXg' \{\} \;
find . -name requirements.yaml -exec \
  sed -i 'sXhttps://kubernetes-charts-incubator.storage.googleapis.com/*Xalias:incubatorXg' \{\} \;
#+END_SRC

#+RESULTS: ensure alias:repo usage everywhere


#+RESULTS:

#+NAME: setup and serve stable repo locally via alias
#+BEGIN_SRC tmate :session hh:repo :noweb yes
  cd <<tmpdir>>
  helm serve --home . --debug --repo-path charts/stable
#+END_SRC

#+NAME: Anchore-Engine's use of alias:stable
#+BEGIN_SRC shell :noweb yes :results output code verbatim :wrap "SRC txt"
  cd <<tmpdir>>
  grep -B2 repository charts/*/*/requirements.yaml \
    | grep -B2 alias:stable \
    | sed 's/"//g' \
    | sed 's:/*$::' | tail -20
#+END_SRC

#+RESULTS: Anchore-Engine's use of alias:stable
#+BEGIN_SRC txt
charts/stable/vault-operator/requirements.yaml:    repository: alias:stable
--
charts/stable/wordpress/requirements.yaml-- name: mariadb
charts/stable/wordpress/requirements.yaml-  version: 5.x.x
charts/stable/wordpress/requirements.yaml:  repository: alias:stable
--
charts/stable/xray/requirements.yaml-- name: postgresql
charts/stable/xray/requirements.yaml-  version: 0.8.7
charts/stable/xray/requirements.yaml:  repository: alias:stable
--
charts/stable/xray/requirements.yaml-- name: rabbitmq-ha
charts/stable/xray/requirements.yaml-  version: 1.5.2
charts/stable/xray/requirements.yaml:  repository: alias:stable
charts/stable/xray/requirements.yaml-- name: mongodb
charts/stable/xray/requirements.yaml-  version: 2.0.5
charts/stable/xray/requirements.yaml:  repository: alias:stable
--
charts/stable/zetcd/requirements.yaml-- name: etcd-operator
charts/stable/zetcd/requirements.yaml-  version: 0.4.3
charts/stable/zetcd/requirements.yaml:  repository: alias:stable
#+END_SRC

#+BEGIN_SRC ruby :tangle Gemfile
source 'https://rubygems.org'

gem 'kramdown', '~> 1.13.0'
gem 'rouge', '~> 2.0.0'
#+END_SRC

#+NAME:baz
#+BEGIN_SRC tmate :noweb yes :session hh:baz
  cd <<tmpdir>>
  helm lint charts/stable/*
  mkdir -p public
  #bundle install --jobs 4 --path vendor
  #bundle exec kramdown --input GFM --template document --syntax-highlighter rouge README.md > public/index.html
  for chart in stable/*; do helm dep up $chart; done
  for chart in stable/*; do helm dep up $chart; done
  (cd public; helm package ../charts/*)
  helm repo index public --url https://cncf.gitlab.io/charts.gitlab.io
  find public/
#+END_SRC

#+Checkout the Charts
#+BEGIN_SRC tmate :noweb yes
  cd <<tmpdir>>
  for c in `ls -d charts/*/*/ | egrep -v test/`
  do
   chartpath=$(echo $c | sed s:/$::)
   chart=`basename $chartpath`
   chartdir=`dirname $chartpath`
   outdir=out/`dirname $chartpath`
   mkdir -p $outdir
   output=$outdir/$chart.yaml
   if [ -e $chartpath/requirements.yaml ]
     then echo === $chart ===
     echo === $chartpath ===
     helm dep up $chartpath
     echo Requirements Update for $chart
   fi
   helm template $chartpath > $output
  done
#+END_SRC

#+NAME: dest
#+BEGIN_SRC elisp
(concat (f-dirname buffer-file-name) "/rendered/" )
#+END_SRC

#+Copy results into this folder
#+BEGIN_SRC shell :var dest=dest()

#+END_SRC
* Requirements

Make sure that you have the following installed

- git
- helm

* Start each stage

#+BEGIN_SRC bash :noeval :tangle ./generate-templates.sh

  #!/usr/bin/env bash
  echo "Generating Templates..."
  export DIR_TEMPLATES=$(mktemp -d)
  echo "Writing templates to $DIR_TEMPLATES..."
  ./setup.sh
  ./scan-stable-apps.sh
  ./scan-incubator-apps.sh
  echo "Finished. Check results in $DIR_TEMPLATES"

#+END_SRC

* Setup the environment

#+BEGIN_SRC bash :noeval :tangle-mode (identity #o755) :tangle ./setup.sh

  #!/usr/bin/env bash
  set -x -e
  cd $DIR_TEMPLATES
  mkdir -p $DIR_TEMPLATES/stable
  mkdir -p $DIR_TEMPLATES/incubator
  git clone --depth 1 https://github.com/helm/charts || true
  ls charts/stable > stable-apps.txt
  ls charts/incubator > incubator-apps.txt
  tree -L 1

#+END_SRC

#+NAME: this_folder
#+BEGIN_SRC elisp
(file-name-directory buffer-file-name)
#+END_SRC

#+RESULTS: this_folder
: /home/hh/apisnoop/dev/helm-charts/

#+Checkout the Charts
#+BEGIN_SRC tmate :noweb yes
  cd <<this_folder()>>
  export DIR_TEMPLATES=<<tmpdir>>
  ./setup.sh
  ./scan-stable-apps.sh
#+END_SRC

#+Iterating over the charts
#+BEGIN_SRC tmate :noweb yes
  cd <<this_folder()>>
  export DIR_TEMPLATES=<<tmpdir>>
#+END_SRC

* Scan 'stable' applications

#+BEGIN_SRC bash :noeval :tangle-mode (identity #o755) :tangle ./scan-stable-apps.sh

  #!/usr/bin/env bash
  echo "Generating templates for 'stable' apps..."
  cd $DIR_TEMPLATES
  for FOLDER in $(cat stable-apps.txt)
  do
    echo "Processing stable/$FOLDER..."
    cd
    helm dep up $DIR_TEMPLATES/charts/stable/$FOLDER
    helm template $DIR_TEMPLATES/charts/stable/$FOLDER \
      &> $DIR_TEMPLATES/stable/$FOLDER.yaml
  done

#+END_SRC

* Scan 'incubator' applications

#+BEGIN_SRC bash :noeval :tangle ./scan-incubator-apps.sh

  #!/usr/bin/env bash
  echo "Generating templates for 'incubator' apps..."
  cd $DIR_TEMPLATES
  for FOLDER in $(cat incubator-apps.txt)
  do
    echo "Processing incubator/$FOLDER..."
    cd $DIR_TEMPLATES/charts/incubator/$FOLDER && helm template . &> $DIR_TEMPLATES/incubator/$FOLDER.yaml
  done

#+END_SRC

* Issue

- Some applications need more setup before we can generate the template file. For now an error message is recorded inside the ~yaml~ file.
- Make the scripts executable as part of the setup/tangle process. For now just make sure to ~chmod +x *.sh~

** TODO generate templates
   With the templates being ungenerated, they aren't valid yaml and are hard to iterate over.
   This may help and hurt at the same time.
   The templates have logic to include / exclude things like disk / rbac depending on variables.
   Taking the default for now, may skew the actual usage of disk/rbac, but I suspect this is ok.
** TODO iterate over generated templates to count usage
   Usage can be counted by number of charts, number of times used total.

# Local Variables:
# eval: (setq socket (concat "/tmp/" user-login-name "." (file-name-base buffer-file-name) ".iisocket"))
# org-babel-tmate-session-prefix: ""
# org-babel-tmate-default-window-name: "main"
# org-confirm-babel-evaluate: nil
# End:

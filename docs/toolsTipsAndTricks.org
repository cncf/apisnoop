#+TITLE: VIM Commands Summary


* Purpose                                                          :vim:tips:
-- Note: This became repository for all cmd cheats picked up over the last couple of weeks, need a way to group them, also easy reference? current is open and search... keywords still not refined

These tips are for using the VIM mode of Spacemacs.
* Basics
- Insertion mode, type i or a to insert after the cursor.
- To get back into normal mode, press the Esc key or rapidly press f d.
- Pressing <ESC> will place you in normal state or will cancel an unwanted and partially completed command.
- These commands are executed in command mode / normal state.
* Command format

 The format for a command in Command Mode (normal state) is:
: [number]  command  object
OR
: command  [number]  object
where:
- number :: how many times to repeat the command
- command :: what to do (e.g. =d=  for delete)
- object :: is what the command should act upon, such as  =w=  for word.
* Editor
** Switch on menu bar: Spc Spc Type: Menu and select Menu-bar-mode
** Quit   =SPACE q q=
** Increase/decrease font size   =SPACE z x= (+ k, k, etc. -j, j etc.)
** To see all open buffers Type =Spc bb=
** Cancel incomplte / wrong command type: =Clt G=
** Insert a hyperlink =,i l= - Then type the hyperlink + Enter, Type text assisiated with hyperlink + Enter


Note: Combinations of refering to text object using:
- w for word
- S for sentence
- p for paragraph

* Files
** Create a file   =SPACE f f= <type in the new file path, press enter, it will ask to create a file>
** Delete a file =SPACE f D=
** Find a file in your project   =SPACE p f=
** Edit the .spacemacs config file   =SPACE f e d=
** Switch to a file recently opened  =SPACE b b=
** writes current buffer to disk with file name FILENAME. =:w FILENAME=
** saves the lines # through # in file FILENAME. =:#,#w FILENAME=
** retrieve file FILENAME and insert into the current buffer following the cursor position =:r FILENAME=
* Find
** Find text in buffer   =/=
(type search text, press ENTER, followed by n or N (next/previous))
** Find next instance of word cursor is over    =*=
** Find previous instance of word cursor is over    =#=
** Turn off previous search highlighting   =:nohl=  (then press ENTER)
** Find text in project   SPACE /
** Find text under cursor in project (or selected with visual-mode)   SPACE *
** Resume last search   SPACE s l
** Find and replace text in buffer, from current line   :.,$s/<find text>/<replace text>/gc

* Navigate
** move cursor left|down|up|right =h|j|k|l=
** move (H)igh, (M)iddle, or (L)ow within the view frame =H|M|L=
** move up a page   =ctrl u=
** Move down a page   =ctrl d=
** Move the line with cursor to the middle of the screen =zz=
** Move the line with cursor to the top of screen =zt=
** Move the line with cursor to the bottom of screen =zb=
** Go up to next paragraph (whitepace line)   ={=
** Go down to next paragraph (whitepace line)   =}=
** Go to beginning of the line =0= or =^=
** Go to end of the line =$=
** Forward by word =w= (beginning of the word) or =e= (end)
** Backwards by word =b=
** Add more lines between lines / Move lines down =Ctrl j=
* Navigate by "Finding"
** find a character forward in a line and move to it =f<char>=
** find a character forward in a line and move until it (one character before) =t<char>=
** (f)ind a character backward in a line and move to it =F<char>=
** find a character backward in a line and move until it =T<char>=
** repeat last f, t, F, or T command =;=
** To find other instances of a word, while on the word, =**=
hightlight all the same words and type n to go to the next word.

Note: Use f & t (or F&T) is combination with other commands to build a new command ie. dtx = delete till x or ytb = yank till b

* Move in buffer
** go to the beginning of a buffer =gg=
** move to the end of a buffer =G=
** go to line number<NUM> =:<NUM>ENTER= or =<NUM>G=
** Activate relitive line numbers =SPC t r=
** Activage normal line numbers =SPC t n=
* Open / Collapse heading trees
  - Type: TAB for a single heading
  - Type: Spc TAB to cycle through all heading trees in the buffer.

* Window (Frames) Layouts
** Move between frames =Ctl x o=
** Move between frames =Spc + frame number=
** close the active frame =Clt x 0= or =Spc w c=
** Split frame vertically   =SPACE w s=
** Split frame horizontally   =SPACE w h=
** Resize windows height =Ctrl w + or -=
** Resize windows width =Ctrl w < or >=
** Make all windows same size =Ctrl w ==
** Navigate to the window in the given direction =<SPC w h|j|k|l=
** Move the current window in the given direction =<SPC w H|J|K|L
* Buffers
** move between open Buffers (Files) =Spc + TAB=
** List open buffers =SPACE b b=
** Open new buffer =SPACE b N n=
** In the Box, launch a new window with =Clt b, c=
** Close a buffer =Ctrl x + buffer number= - Close buffer 2: =Ctrl x 2=
* Highlight Text with Visual Mode
- Press v. (To enter visual mode so you can highlight text).
- Use the arrow keys (or h,j,k,l,w,b,$) to highlight.
- Type v i w for word selection, v i s for sentence selection
* Editing in an org file
- Type Formating (Bold, Underline etc.) Type , x + options in sub menu ie. b = Bold, u = Underline
- Make a title Type at the start of a line: #+TITLE This is a title
- Make a bullet point Type: * followed by the heading. Next level of bullet points type: ** and *** for the next level etc.
- Make a bullet point, 2nd options type: Alt + Enter + Enter
- To continue with bullet list, at the end of the previous line press Alt + Enter
- Add a TODO type Ctrl + shift and type Enter
* Copy
** selected text type  =y=
** a word =yw=
** a line =yy=
** from cursor to end of line =y$=
** Show previous things you’ve copied (yanked)  =SPACE r y=
* Insert
** text at the cursor =i=
** on line below cursor =o=
** on line above cursor =O=
** text after character cursor is on =a=
** text at end of line =A=
** and replace all existing text =R=
* Replace / Change
** replace character under cursor =r=
** change word you are on =c i w= .
** change sentence you are on =cis=
** change from cursor to specified object <OBJ> =c<OBJ>=
eg. Type  cw  to change from the cursor to the end of the word,  c$  to change to the end of a line. The format for change is:      [number]  c  object    OR    c  [number]  object
** change everything between quotes   =c i “=
(this also works for parens, single quotes, etc.)
* Substitute
** new for the first old on a line =:s/old/new=
** substitute new for all 'old's on a line =:s/old/new/g=
** substitute phrases between two line #'s =:#,#s/old/new/g=
** substitute all occurrences in the file =:%s/old/new/g=
* Delete
deleted text is added : (Work as cut function)
** from the cursor to the end of a word =dw=
** from the cursor to the end of a line =d$=
** a whole line =dd=
** complete line =C= (will delete from cursor forward)
** a character under the cursor in normal state =dx=
** highlighted text   =d=
** word and insert text    =cw=
** to end of line     =d$=
** until right paren   =df)=
** a word you are on =d a w=
** a sentence you are on =d a s=
** to the end of the current word =de=
** to the end of next word =d2e=
** down a line (current and one below) =dj=
** up until next closing parenthesis =dt)=
** up until the first search match for "world" =d/world=

* Undo / Redo
*** Undo entered command =Ctrl g=
*** undo previous actions =u=
*** Redo (undo the undo's) =CTRL-Rc=
*** see Undo tree type =SPC a u=
*** Redo   =ctrl-r=
* Execute an external command =:!=
** Show a directory listing =:!ls=  or  =:!dir=
** removes file FILENAME =:!rm=  or  =:!del FILENAME=
* misc
** Go to previous function =[=
** Go to next function   =]]=
** Go up to outer brace   =[{=
** Go down to outer brace   =]}=
** Comment out a line    =g c c=   (requires the evil-commentary layer)
** Comment out highlighted text   =g c=
** Indenting highlighted text =>= or =<= to indent right or left.
(to indent more, type 2> or 3>)
** Join lines separated by whitespace   =J=
** Show whitespace   =SPACE t w=
** Convert spaces to tabs   =SPACE :tabify=
** Convert tabs to spaces   =SPACE :untabify=
* spacemacs commands I should probably know by heart
**** Files manipulations key bindings
Files manipulation commands (start with ~f~):

| Key Binding | Description                                                    |
|-------------+----------------------------------------------------------------|
| ~SPC f c~   | copy current file to a different location                      |
| ~SPC f C d~ | convert file from unix to dos encoding                         |
| ~SPC f C u~ | convert file from dos to unix encoding                         |
| ~SPC f D~   | delete a file and the associated buffer (ask for confirmation) |
| ~SPC f E~   | open a file with elevated privileges (sudo edit)               |
| ~SPC f f~   | open file with =helm= (or =ido=)                               |
| ~SPC f F~   | try to open the file under point =helm=                        |
| ~SPC f j~   | jump to the current buffer file in dired                       |
| ~SPC f l~   | open file literally in =fundamental mode=                      |
| ~SPC f L~   | Locate a file (using =locate=)                                 |
| ~SPC f o~   | open a file using the default external program                 |
| ~SPC f R~   | rename the current file                                        |
| ~SPC f s~   | save a file                                                    |
| ~SPC f S~   | save all files                                                 |
| ~SPC f r~   | open a recent file with =helm=                                 |
| ~SPC f t~   | toggle file tree side bar using [[https://github.com/jaypei/emacs-neotree][NeoTree]]                        |
| ~SPC f v d~ | add a directory variable                                       |
| ~SPC f v f~ | add a local variable to the current file                       |
| ~SPC f v p~ | add a local variable to the first line of the current file     |
| ~SPC f y~   | show current file absolute path in the minibuffer              |

## Find files
SPC ff: find files or url
SPC pf: find file in project
SPC ph: search in a project with helm
SPC bb: search in buffers

--
## Search in files
SPC ss
/: search with evil

--
## Window
SPC w =	balance split windows
SPC w c	close a window
SPC w c	close a window
SPC w C	delete another window using ace-delete-window
SPC w d	toggle window dedication (dedicated window cannot be reused by a mode)
SPC w [hjkl] move to window
SPC w [HJKL] move the window
SPC w s or SPC w -	horizontal split
SPC w S	horizontal split and focus new window
SPC w u	undo window layout (used to effectively undo a closed window)
SPC w U	redo window layout
SPC w v or SPC w /	vertical split
SPC w V	vertical split and focus new window
SPC w w	cycle and focus between windows
SPC w m	maximize/minimize a window (maximize is equivalent to delete other windows)
SPC w M	maximize/minimize a window, when maximized the buffer is centered

--
## buffer
SPC TAB	switch to alternate buffer in the current window (switch back and forth)
SPC b b	switch to a buffer using helm
SPC b d	kill the current buffer (does not delete the visited file)
SPC b e	erase the content of the buffer (ask for confirmation)
SPC b h	open *spacemacs* home buffer
SPC b k	kill a buffer
SPC b K	kill all buffers except the current one


## errors
SPC e n	go to the next error
SPC e p	go to the previous error

--
## Quit
SPC q q	Quit Emacs and kill the server, prompt for changed buffers to save
SPC q Q	Quit Emacs and kill the server, lose all unsaved changes.
SPC q r	Restart both Emacs and the server, prompting to save any changed buffers
SPC q s	Save the buffers, quit Emacs and kill the server
SPC q z	Kill the current frame


Git commands (start with ~g~):

| Key Binding | Description                                         |
|-------------+-----------------------------------------------------|
| ~SPC g b~   | open a =magit= blame                                |
| ~SPC g B~   | quit =magit= blame                                  |
| ~SPC g c~   | commit changes                                      |
| ~SPC g C~   | checkout branches                                   |
| ~SPC g d~   | show diff prompt                                    |
| ~SPC g D~   | show diff against current head                      |
| ~SPC g e~   | show ediff comparison                               |
| ~SPC g E~   | show ediff against current head                     |
| ~SPC g f~   | show fetch prompt                                   |
| ~SPC g F~   | show pull prompt                                    |
| ~SPC g H c~ | clear highlights                                    |
| ~SPC g H h~ | highlight regions by age of commits                 |
| ~SPC g H t~ | highlight regions by last updated time              |
| ~SPC g i~   | git init a given directory                          |
| ~SPC g I~   | open =helm-gitignore=                               |
| ~SPC g l~   | open a =magit= log                                  |
| ~SPC g L~   | display the log for a file                          |
| ~SPC g P~   | show push prompt                                    |
| ~SPC g s~   | open a =magit= status window                        |
| ~SPC g S~   | stage current file                                  |
| ~SPC g m~   | display the last commit message of the current line |
| ~SPC g t~   | launch the git time machine                         |
| ~SPC g U~   | unstage current file                                |
* Go Commands
- New terminal block <s + TAB
- Add Go to the block to for Golang: =#+begin_src GO=
- Run the block with ,, in the block in command mode
* Basic Linux
- List directories - =ls=
- Launch Treemacs - =SPACE p t= , Quit out of Treemacs =q=
- GIT commands ??
* Tmate session
- Type tmate discplay -p "#{tmate_ssh}'+ ENTER
- ssh code will be displayed on screen that can be shared for pairing.

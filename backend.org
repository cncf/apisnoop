#+NAME: APISnoop WebUI Backend
#+AUTHOR: Zach Mandeville
#+EMAIL: zz@ii.coop
#+TODO: TODO(t) NEXT(n) IN-PROGRESS(i) BLOCKED(i) | DONE(d) DONE-AND-SHARED(!)
#+PROPERTY: header-args :dir (file-name-directory buffer-file-name)
#+XPROPERTY: header-args:shell :results silent
#+XPROPERTY: header-args:shell :exports code
#+XPROPERTY: header-args:shell :wrap "SRC text"
#+PROPERTY: header-args:tmate :socket "/tmp/.zz-left.isocket"
#+PROPERTY: header-args:tmate :session api:main

* Introduction
This deals with the backend for apisnoop.cncf.io.
* Architecture
  For the backend we will be using Feathers //for right now//.  We may find that we want something completely different, or that we want our webui to be able to live in multiple places.  Our goal is for the two to be entirely separate, so either can change if needed.
** Feathers
   [[https://feathersjs.com/][Feathers]] is a well-designed and well-documented api layer written in Node.  It has good support among my Wellington dev friends, and so I have better help if I encounter any sorta problem.  It also is just really pleasant to use so far, with a good model for how to create different services.  It also has an existing React connector.
*** Feathers Resources
**** [[https://www.youtube.com/playlist?list=PLwSdIiqnDlf_lb5y1liQK2OW5daXYgKOe][youtube channel]]
**** [[https://stackoverflow.com/questions/tagged/feathersjs][stackoverflow tag]]
**** [[https://github.com/issues?utf8=%25E2%259C%2593&q=is%253Aopen+is%253Aissue+user%253Afeathersjs+][github page]]
**** [[https://blog.feathersjs.com/][medium page]]
**** [[http://slack.feathersjs.com/][slack channel]]
* The Code
** Setting up our API Initially
**** Generating the Services

     We generated all the services using the [[https://github.com/feathersjs/cli][feathers js CLI]] and their default options given.  Doing this creates a service, hooks, a test boilerplate, and more.  We aren't touching the majority of these files yet.  Most of our work is done within the config service, explained below.

** Services
   (**NOTE**: for each service, make sure paginate is turned off.  In the future I should do this automatically.)
*** Introduction
Services refer to the different paths of our api, and the various jobs and manipulation we do to the data being fed through these paths.  They act as gatekeeepers to our various db's, so we aren't doing a bunch of db queries from all over the code and potentially causing strange behavior and hard to track errors.  Through these, we have a consistent and reliable way to ask for and give data to our front-end client.
**** Service Definitions
   We have four services now.
 - Config :: Handles the initial setup (reading json files from disk and distributing the file to the proper Releases service, performing any cleanup as necessary).
 - Releases ::  The releases/bucket/jobs available to us (from running our apisnoop script with =--download-apiusage=).  Holds all the metadata about the release.
 - Endpoints :: all the endpoints as taken from the release.  This service is the heart of our sunburst chart.
 - Tests :: all the tests from m the releases organized by id and the releases name.
*** Config
    :PROPERTIES:
    :header-args: :noweb yes :tangle ./src/services/config/config.class.js
    :END:
   The config is run whenever the server starts up, and takes JSON files placed in =data-gen/processed= and generates paths from the data held within.

The core file in this processed folder is  =apisnoop.json=.  This lists all the endpoints and whether they're tested and the attached tests and useragents and so on.

   We use glob to search within our =data-gen/processed= folder, and it returns a list of filenames all with the full path after processed.   In this way, we can contin8ually expand our buckets and jobs, and the server will work the same.

**** Overall Layout
     #+NAME: config.class.js layout
     #+BEGIN_SRC js
       /* eslint-disable no-unused-vars */
       const fs = require('fs')
       const glob = require('glob')
       const dayjs = require('dayjs')

       var dataFolder = 'data-gen/processed'

       class Service {
         constructor (options) {
           this.options = options || {};
         }

         async setup (app, params) {
           populateAPI(app, dataFolder)
         }
       }

       <<Define populateAPI>>
       <<Define populateEndpointsAndTestsAndUseragents>>
       <<Define populateReleases>>
       <<Define getBucketJobRelease>>
       <<Define addEntryToEndpointService>>
       <<Define addEntryToTestService>>
       <<Define addEntryToUseragentsService>>
       <<Define addEntryToReleasesService>>
       <<Define addOrUpdateEntry>>

       module.exports = function (options) {
         return new Service(options);
       };

       module.exports.Service = Service;
    #+END_SRC

     We only have a single method for our service here, which is setup.  We don't want config to be an accessible path, as we are just using it at the start to populate our actual paths.


**** Define populateAPI
     This is our main set of functions for bringing in the data from our jsons into the api.  originally we had it set to a specific folder, and knowing the exact files we were looking for.  But now, we need to glob anything starting within =../../data-gen/processed/=

     #+NAME: Define populateAPI
     #+BEGIN_SRC js :tangle no
       function populateAPI (app, dir)  {
         var globOpts = {
           cwd: dir
         }
         populateEndpointsAndTestsAndUseragents(app, globOpts, dir)
         populateReleases(app, globOpts, dir)
       }

     #+END_SRC

**** Define populateEndpointsAndTestsAndUseragents

    #+NAME: Define populateEndpointsAndTestsAndUseragents
    #+BEGIN_SRC js :tangle no
      function populateEndpointsAndTestsAndUseragents (app, opts, dir) {
        glob("**/apisnoop.json", opts, (err, processedAudits) => {
          for (var i = 0; i < processedAudits.length; i++) {
            var fileName = processedAudits[i]
            var releaseJson = fs.readFileSync(`${dir}/${fileName}`, 'utf-8')
            var releaseData = JSON.parse(releaseJson)
            var bucketJobRelease = getBucketJobRelease(fileName)
            addEntryToEndpointService(app, releaseData, bucketJobRelease)
            addEntryToTestService(app, releaseData, bucketJobRelease)
            addEntryToUseragentsService(app, releaseData, bucketJobRelease)
          }
        })
      }

    #+END_SRC
**** Define populateReleases
     #+NAME: Define populateReleases
     #+BEGIN_SRC js :tangle no
       function populateReleases (app, opts, dir) {
         glob("**/metadata.json", opts, (err, processedAudits) => {
           for (var i = 0; i < processedAudits.length; i++) {
             var fileName = processedAudits[i]
             var metadataJson = fs.readFileSync(`${dir}/${fileName}`, 'utf-8')
             var metadata = JSON.parse(metadataJson)
             var finishedFile = fileName.replace('metadata.json', 'finished.json')
             var finishedJson = fs.readFileSync(`${dir}/${finishedFile}`, 'utf-8')
             var finishedData = JSON.parse(finishedJson)
             var bucketJobRelease = getBucketJobRelease(fileName)
             addEntryToReleasesService(app, metadata, finishedData, bucketJobRelease)
           }
         })
       }

     #+END_SRC
**** Define getBucketJobRelease

     #+NAME: Define getBucketJobRelease
     #+BEGIN_SRC js :tangle no
       function getBucketJobRelease (fileName) {
         fileNameArr = fileName.split('/')
         console.log(fileNameArr)
         return {
           bucket: fileNameArr[0],
           job: fileNameArr[1],
           release: fileNameArr[0] + "_" + fileNameArr[1]
         }
       }

     #+END_SRC
***** TODO make this better!
      This is fragile code, as it's based on a path we split assuming the array indices will hold true.  But I've seen  the data loaded either with /dev/ as the root path and without....and this could be changing as we change our data-load conventuions.  So we need to make it not based on a path, but to be explicitly pulling each section.
**** Define addEntryToEndpointService
     #+NAME: Define addEntryToEndpointService
     #+BEGIN_SRC js :tangle no
       async function addEntryToEndpointService (app, releaseData, bucketJobRelease) {
         var service = app.service('/api/v1/endpoints')
         var endpointNames = Object.keys(releaseData.endpoints)
         var tests = releaseData.tests
         for (var endpointName of endpointNames) {
           var endpointMethods = Object.keys(releaseData.endpoints[endpointName])
           for (var endpointMethod of endpointMethods) {
             var rawEndpoint = releaseData.endpoints[endpointName][endpointMethod]
             var endpoint = {
               name: endpointName,
               method: endpointMethod,
               level: rawEndpoint.level,
               test_tags: rawEndpoint.test_tags,
               tests: rawEndpoint.tests,
               description: rawEndpoint.description,
               path: rawEndpoint.path,
               useragents: rawEndpoint.useragents,
               category: rawEndpoint.category,
               isTested: rawEndpoint.tests.length > 0,
               // This is what used for 1.11 and earlier
               // isTested: rawEndpoint.counter > 0,
               ...bucketJobRelease
             }
             // An endpoint is unique by name, release, method.
             var uniqueQuery = {
               name: endpoint.name,
               method: endpoint.method,
               release: endpoint.release
             }
             addOrUpdateEntry(service, endpoint, uniqueQuery)
           }
         }
       }
     #+END_SRC
**** Define addEntryToTestService
     #+NAME: Define addEntryToTestService
     #+BEGIN_SRC js :tangle no
       async function addEntryToTestService (app, releaseData, bucketJobRelease) {
         var service = app.service('/api/v1/tests')
         var testNames = Object.keys(releaseData.test_sequences)
         for (var testName of testNames) {
           var testSequence = releaseData.test_sequences[testName]
           var test = {
             name: testName,
             sequence: testSequence,
             ...bucketJobRelease

           }
           // An test is unique by testName and Release.
           var uniqueQuery = {
             name: test.name,
             release: test.release
           }
           addOrUpdateEntry(service, test, uniqueQuery)
         }
       }

     #+END_SRC
**** Define addEntryToUseragentsService
     #+NAME: Define addEntryToUseragentsService
     #+BEGIN_SRC js :tangle no
       async function addEntryToUseragentsService (app, releaseData, bucketJobRelease) {
         var service = app.service('/api/v1/useragents')
         var useragents = Object.keys(releaseData.useragents)
         for (var useragentEntry of useragents) {
           var touchedEndpoints = releaseData
           var touchedEndpoints = releaseData.useragents[useragentEntry]
           var useragent = {
             name: useragentEntry,
             endpoints: touchedEndpoints,
             ...bucketJobRelease
           }
           // A useragent is unique by Name and Release.
           var uniqueQuery = {
             name: useragent.name,
             release: useragent.release
           }
           addOrUpdateEntry(service, useragent, uniqueQuery)
         }
       }

     #+END_SRC

**** Define addEntryToReleasesService
     #+NAME: Define addEntryToReleasesService
     #+BEGIN_SRC js :tangle no
       async function addEntryToReleasesService (app, metadata, finishedData, bucketJobRelease) {
         var service = app.service('/api/v1/releases')
         var release = {
           name: bucketJobRelease.release,
           ...metadata,
           ...finishedData,
           ...bucketJobRelease,
           release_short: metadata["job-version"].split("+")[0],
           gathered_datetime: dayjs(finishedData.timestamp * 1000).format('YYYY-MM-DD, HH:mm:ss'),
           version: finishedData["version"].match(/v(.*?)-/)[1]
         }
         // Release is unique by bucket, job, and timestamp
         var uniqueQuery = {
           bucket: release.bucket,
           timestamp: release.timestamp
         }
         addOrUpdateEntry(service, release, uniqueQuery)
       }


     #+END_SRC

**** Define addOrUpdateEntry
     #+NAME: Define addOrUpdateEntry
     #+BEGIN_SRC js :tangle no
        async function addOrUpdateEntry (service, entry, uniqueQuery) {
          var existingEntry = await service.find({query:uniqueQuery})
          if (existingEntry.length === 0) {
            await service.create(entry)
          } else {
            await service.update(existingEntry[0]._id, entry)
          }
        }
     #+END_SRC

      This will read the file and send the data to our releases service, but releaes will reject it by default because some of the fiels in the data have periods and our database does not like that.  So we add a hook to Releases that takes this data given to it and changes it's peirods to underscores before trying to add it to the database.  We generated the hook using feathers/cli, setting it to be before any create or update action...meaning it manipualtes the file BEFORE it is added to the db through CREATE or UPDATE

** Middleware
   :PROPERTIES:
   :header-args: :noweb yes :tangle ./src/middleware/index.js
   :END:
   This is where we can hold express middleware; express being the server framework that Feathers is atop of.
   #+NAME: index.js
   #+BEGIN_SRC js
// eslint-disable-next-line no-unused-vars
module.exports = function (app) {
  // Add your custom middleware here. Remember that
  // in Express, the order matters.
};


   #+END_SRC

[
  {
    "name": "readCoreV1NamespaceStatus",
    "method": "get",
    "level": "stable",
    "test_tags": [],
    "tests": [],
    "description": "read status of the specified Namespace",
    "path": "/api/v1/namespaces/{name}/status",
    "category": "core",
    "isTested": false,
    "bucket": "9058",
    "job": "apisnoop.json",
    "release": "9058_apisnoop.json",
    "_id": "6OBwAVYGdU2tOKE8"
  },
  {
    "name": "readCoreV1NamespacedPersistentVolumeClaimStatus",
    "method": "get",
    "level": "stable",
    "test_tags": [],
    "tests": [],
    "description": "read status of the specified PersistentVolumeClaim",
    "path": "/api/v1/namespaces/{namespace}/persistentvolumeclaims/{name}/status",
    "category": "core",
    "isTested": false,
    "bucket": "ci-kubernetes-e2e-gce-cos-k8sstable3-default",
    "job": "460",
    "release": "ci-kubernetes-e2e-gce-cos-k8sstable3-default_460",
    "_id": "6P78EQLmPvD27Ls7"
  },
  {
    "name": "listCoreV1NamespacedEvent",
    "method": "watch",
    "level": "stable",
    "test_tags": [],
    "tests": [],
    "description": "list or watch objects of kind Event",
    "path": "/api/v1/namespaces/{namespace}/events",
    "category": "core",
    "isTested": false,
    "bucket": "34681",
    "job": "apisnoop.json",
    "release": "34681_apisnoop.json",
    "_id": "6PGRw4iDxJrA4QaS"
  },
  {
    "name": "listSettingsV1alpha1NamespacedPodPreset",
    "method": "get",
    "level": "alpha",
    "test_tags": [],
    "tests": [],
    "description": "list or watch objects of kind PodPreset",
    "path": "/apis/settings.k8s.io/v1alpha1/namespaces/{namespace}/podpresets",
    "category": "settings",
    "isTested": true,
    "bucket": "1814",
    "job": "apisnoop.json",
    "release": "1814_apisnoop.json",
    "_id": "6PxTDVRO9ZhOsmXz"
  },
  {
    "name": "getAdmissionregistrationV1beta1APIResources",
    "method": "get",
    "level": "beta",
    "test_tags": [
      "[sig-storage]",
      "[Driver: nfs]",
      "[Testpattern: Pre-provisioned PV (default fs)]",
      "[Driver: aws]",
      "[Testpattern: Pre-provisioned PV (ext4)]",
      "[Driver: hostPathSymlink]",
      "[Testpattern: Inline-volume (default fs)]",
      "[Driver: hostPath]",
      "[Driver: cinder]",
      "[sig-cli]",
      "[k8s.io]",
      "[Testpattern: Dynamic PV (default fs)]",
      "[Driver: azure]",
      "[Testpattern: Dynamic PV (ext3)]",
      "[sig-apps]",
      "[StatefulSetBasic]",
      "[Conformance]",
      "[sig-api-machinery]",
      "[Testpattern: Inline-volume (ext4)]",
      "[Driver: csi-hostpath-v0]",
      "[NodeConformance]",
      "[Driver: vSphere]",
      "[Driver: csi-hostpath]",
      "[Testpattern: Dynamic PV (block volmode)]",
      "[Driver: gluster]",
      "[sig-auth]",
      "[Driver: emptydir]",
      "[sig-instrumentation]",
      "[Testpattern: Dynamic PV (ext4)]",
      "[Testpattern: Inline-volume (xfs)]",
      "[Testpattern: Inline-volume (ext3)]",
      "[Driver: gcepd]",
      "[sig-scheduling]",
      "[NodeFeature:FSGroup]",
      "[Testpattern: Dynamic PV (filesystem volmode)]",
      "[NodeFeature:PodReadinessGate]",
      "[Testpattern: Dynamic PV (xfs)]",
      "[Testpattern: Pre-provisioned PV (ext3)]",
      "[Volume type: dir-bindmounted]",
      "[sig-network]",
      "[Volume type: block]",
      "[Testpattern: Pre-provisioned PV (block volmode)]",
      "[sig-autoscaling]",
      "[HPA]",
      "[Volume type: tmpfs]",
      "[Volume type: dir]",
      "[Volume type: blockfswithformat]",
      "[Volume type: dir-link-bindmounted]",
      "[NodeFeature:Sysctls]",
      "[Volume type: dir-link]",
      "[sig-node]",
      "[Testpattern: Pre-provisioned PV (xfs)]",
      "[Volume type: blockfswithoutformat]",
      "[Testpattern: Pre-provisioned PV (filesystem volmode)]",
      "[DisabledForLargeClusters]",
      "[fast]",
      "[Projection]",
      "[sig-ui]"
    ],
    "tests": [
      "[sig-storage] Downward API volume should provide container's cpu limit [NodeConformance] [Conformance]",
      "[sig-storage] In-tree Volumes [Driver: gluster] [Testpattern: Inline-volume (default fs)] subPath should support existing single file",
      "[sig-storage] In-tree Volumes [Driver: nfs] [Testpattern: Inline-volume (default fs)] subPath should support readOnly file specified in the volumeMount",
      "[sig-storage] In-tree Volumes [Driver: cinder] [Testpattern: Dynamic PV (ext4)] volumes should allow exec of files on the volume",
      "[sig-apps] DisruptionController evictions: enough pods, absolute => should allow an eviction",
      "[sig-cli] Kubectl client [k8s.io] Update Demo should scale a replication controller  [Conformance]",
      "[k8s.io] KubeletManagedEtcHosts should test kubelet managed /etc/hosts file [NodeConformance] [Conformance]",
      "[sig-storage] In-tree Volumes [Driver: hostPath] [Testpattern: Dynamic PV (xfs)] volumes should be mountable",
      "[sig-storage] In-tree Volumes [Driver: gluster] [Testpattern: Dynamic PV (ext3)] volumes should allow exec of files on the volume",
      "[sig-storage] In-tree Volumes [Driver: azure] [Testpattern: Inline-volume (ext3)] volumes should be mountable",
      "[sig-storage] In-tree Volumes [Driver: gluster] [Testpattern: Dynamic PV (default fs)] volumes should be mountable",
      "[sig-storage] In-tree Volumes [Driver: hostPath] [Testpattern: Inline-volume (default fs)] subPath should support readOnly file specified in the volumeMount",
      "[sig-storage] In-tree Volumes [Driver: hostPathSymlink] [Testpattern: Inline-volume (default fs)] subPath should support existing single file",
      "[sig-storage] In-tree Volumes [Driver: aws] [Testpattern: Dynamic PV (ext4)] volumes should allow exec of files on the volume",
      "[sig-storage] PersistentVolumes-local  [Volume type: dir] Set fsGroup for local volume should set fsGroup for one pod",
      "[sig-storage] In-tree Volumes [Driver: vSphere] [Testpattern: Inline-volume (default fs)] subPath should support readOnly file specified in the volumeMount",
      "[sig-storage] Secrets should be consumable from pods in volume with mappings and Item Mode set [NodeConformance] [Conformance]",
      "[sig-apps] Deployment deployment should delete old replica sets [Conformance]",
      "[k8s.io] Kubelet when scheduling a busybox Pod with hostAliases should write entries to /etc/hosts [NodeConformance] [Conformance]",
      "[sig-storage] PersistentVolumes-local  [Volume type: blockfswithformat] Two pods mounting a local volume at the same time should be able to write from pod1 and read from pod2",
      "[sig-storage] ConfigMap should be consumable from pods in volume with defaultMode set [NodeConformance] [Conformance]",
      "[sig-storage] In-tree Volumes [Driver: azure] [Testpattern: Inline-volume (default fs)] volumes should be mountable",
      "[sig-storage] In-tree Volumes [Driver: emptydir] [Testpattern: Dynamic PV (block volmode)] volumeMode should fail in binding dynamic provisioned PV to PVC",
      "[sig-apps] CronJob should replace jobs when ReplaceConcurrent",
      "[sig-scheduling] ResourceQuota should create a ResourceQuota and capture the life of a configMap.",
      "[k8s.io] Container Runtime blackbox test when starting a container that exits should report termination message as empty when pod succeeds and TerminationMessagePolicy FallbackToLogOnError is set [NodeConformance]",
      "[sig-storage] CSI Volumes [Driver: csi-hostpath-v0] [Testpattern: Dynamic PV (default fs)] subPath should support non-existent path",
      "[sig-storage] In-tree Volumes [Driver: hostPathSymlink] [Testpattern: Dynamic PV (block volmode)] volumeMode should fail in binding dynamic provisioned PV to PVC",
      "[sig-storage] PersistentVolumes-local  [Volume type: blockfswithformat] One pod requesting one prebound PVC should be able to mount volume and read from pod1",
      "[sig-storage] PersistentVolumes NFS with Single PV - PVC pairs create a PV and a pre-bound PVC: test write access",
      "[sig-storage] In-tree Volumes [Driver: azure] [Testpattern: Pre-provisioned PV (block volmode)] volumeMode should create sc, pod, pv, and pvc, read/write to the pv, and delete all created resources",
      "[sig-storage] PersistentVolumes-local  [Volume type: tmpfs] Set fsGroup for local volume should set same fsGroup for two pods simultaneously",
      "[sig-network] Services should check NodePort out-of-range",
      "[sig-storage] In-tree Volumes [Driver: aws] [Testpattern: Pre-provisioned PV (default fs)] subPath should be able to unmount after the subpath directory is deleted",
      "[sig-storage] Downward API volume should provide podname as non-root with fsgroup [NodeFeature:FSGroup]",
      "[sig-cli] Kubectl client [k8s.io] Proxy server should support --unix-socket=/path  [Conformance]",
      "[k8s.io] Container Runtime blackbox test when starting a container that exits should report termination message if TerminationMessagePath is set as non-root user and at a non-default path [NodeConformance]",
      "[sig-storage] In-tree Volumes [Driver: vSphere] [Testpattern: Dynamic PV (ext3)] volumes should be mountable",
      "[sig-storage] PersistentVolumes-local  [Volume type: blockfswithoutformat] Set fsGroup for local volume should set fsGroup for one pod",
      "[sig-storage] CSI Volumes [Driver: csi-hostpath-v0] [Testpattern: Dynamic PV (ext3)] volumes should allow exec of files on the volume",
      "[sig-storage] In-tree Volumes [Driver: gluster] [Testpattern: Pre-provisioned PV (default fs)] subPath should support existing directories when readOnly specified in the volumeSource",
      "[k8s.io] Container Runtime blackbox test when starting a container that exits should report termination message if TerminationMessagePath is set [NodeConformance]",
      "[sig-cli] Kubectl client [k8s.io] Kubectl create quota should create a quota without scopes",
      "[sig-storage] Subpath Atomic writer volumes should support subpaths with configmap pod with mountPath of existing file [Conformance]",
      "[sig-storage] Projected configMap should be consumable from pods in volume as non-root [NodeConformance] [Conformance]",
      "[sig-storage] In-tree Volumes [Driver: hostPathSymlink] [Testpattern: Pre-provisioned PV (ext4)] volumes should allow exec of files on the volume",
      "[sig-storage] In-tree Volumes [Driver: gluster] [Testpattern: Dynamic PV (ext4)] volumes should allow exec of files on the volume",
      "[sig-storage] In-tree Volumes [Driver: gluster] [Testpattern: Pre-provisioned PV (default fs)] subPath should support readOnly directory specified in the volumeMount",
      "[sig-storage] CSI Volumes [Driver: csi-hostpath-v0] [Testpattern: Dynamic PV (default fs)] volumes should allow exec of files on the volume",
      "[sig-storage] In-tree Volumes [Driver: hostPathSymlink] [Testpattern: Dynamic PV (default fs)] subPath should support non-existent path",
      "[k8s.io] [sig-node] Mount propagation should propagate mounts to the host",
      "[k8s.io] Pods should allow activeDeadlineSeconds to be updated [NodeConformance] [Conformance]",
      "[sig-storage] In-tree Volumes [Driver: hostPathSymlink] [Testpattern: Pre-provisioned PV (ext3)] volumes should be mountable",
      "[sig-api-machinery] Garbage collector should not be blocked by dependency circle [Conformance]",
      "[sig-network] Services should have session affinity work for service with type clusterIP",
      "[sig-storage] In-tree Volumes [Driver: nfs] [Testpattern: Dynamic PV (block volmode)] volumeMode should fail in binding dynamic provisioned PV to PVC",
      "[sig-storage] In-tree Volumes [Driver: hostPathSymlink] [Testpattern: Dynamic PV (ext3)] volumes should allow exec of files on the volume",
      "[sig-storage] In-tree Volumes [Driver: hostPath] [Testpattern: Pre-provisioned PV (ext3)] volumes should be mountable",
      "[k8s.io] Pods should support remote command execution over websockets [NodeConformance] [Conformance]",
      "[sig-storage] In-tree Volumes [Driver: emptydir] [Testpattern: Dynamic PV (default fs)] subPath should support readOnly directory specified in the volumeMount",
      "[sig-api-machinery] AdmissionWebhook Should mutate pod and apply defaults after mutation",
      "[sig-node] Downward API should provide host IP as an env var [NodeConformance] [Conformance]",
      "[sig-storage] PersistentVolumes-local  [Volume type: dir-link-bindmounted] One pod requesting one prebound PVC should be able to mount volume and read from pod1",
      "[sig-scheduling] ResourceQuota should create a ResourceQuota and capture the life of a persistent volume claim. [sig-storage]",
      "[sig-storage] In-tree Volumes [Driver: vSphere] [Testpattern: Inline-volume (default fs)] subPath should support existing directory",
      "[sig-storage] In-tree Volumes [Driver: hostPath] [Testpattern: Dynamic PV (default fs)] subPath should support readOnly file specified in the volumeMount",
      "[sig-storage] In-tree Volumes [Driver: azure] [Testpattern: Inline-volume (default fs)] subPath should support readOnly file specified in the volumeMount"
    ],
    "description": "get available resources",
    "path": "/apis/admissionregistration.k8s.io/v1beta1/",
    "category": "admissionregistration",
    "isTested": true,
    "bucket": "9058",
    "job": "apisnoop.json",
    "release": "9058_apisnoop.json",
    "_id": "6Q6hLjHboA2KMMz8"
  },
  {
    "name": "deleteRbacAuthorizationV1alpha1CollectionNamespacedRoleBinding",
    "method": "delete",
    "level": "alpha",
    "test_tags": [],
    "tests": [],
    "description": "delete collection of RoleBinding",
    "path": "/apis/rbac.authorization.k8s.io/v1alpha1/namespaces/{namespace}/rolebindings",
    "category": "rbacAuthorization",
    "isTested": false,
    "bucket": "1814",
    "job": "apisnoop.json",
    "release": "1814_apisnoop.json",
    "_id": "6QNu5nVqmCRSOVfs"
  },
  {
    "name": "listPolicyV1beta1PodDisruptionBudgetForAllNamespaces",
    "method": "watch",
    "level": "beta",
    "test_tags": [],
    "tests": [],
    "description": "list or watch objects of kind PodDisruptionBudget",
    "path": "/apis/policy/v1beta1/poddisruptionbudgets",
    "category": "policy",
    "isTested": true,
    "bucket": "ci-kubernetes-e2e-gce-cos-k8sbeta-default",
    "job": "9058",
    "release": "ci-kubernetes-e2e-gce-cos-k8sbeta-default_9058",
    "_id": "6QSqyBG5tjoX9YJH"
  },
  {
    "name": "createSchedulingV1beta1PriorityClass",
    "method": "post",
    "level": "beta",
    "test_tags": [
      "[sig-scheduling]"
    ],
    "tests": [
      "[sig-scheduling] PreemptionExecutionPath runs ReplicaSets to verify preemption running path"
    ],
    "description": "create a PriorityClass",
    "path": "/apis/scheduling.k8s.io/v1beta1/priorityclasses",
    "category": "scheduling",
    "isTested": true,
    "bucket": "34681",
    "job": "apisnoop.json",
    "release": "34681_apisnoop.json",
    "_id": "6SZ3PZynry32zsIw"
  },
  {
    "name": "patchBatchV2alpha1NamespacedCronJob",
    "method": "patch",
    "level": "alpha",
    "test_tags": [],
    "tests": [],
    "description": "partially update the specified CronJob",
    "path": "/apis/batch/v2alpha1/namespaces/{namespace}/cronjobs/{name}",
    "category": "batch",
    "isTested": false,
    "bucket": "460",
    "job": "apisnoop.json",
    "release": "460_apisnoop.json",
    "_id": "6SagdzWM44d4dgRw"
  },
  {
    "name": "listAppsV1DaemonSetForAllNamespaces",
    "method": "watch",
    "level": "stable",
    "test_tags": [],
    "tests": [],
    "description": "list or watch objects of kind DaemonSet",
    "path": "/apis/apps/v1/daemonsets",
    "category": "apps",
    "isTested": true,
    "bucket": "460",
    "job": "apisnoop.json",
    "release": "460_apisnoop.json",
    "_id": "6TPwmDb8cnigoqtT"
  },
  {
    "name": "replaceCoreV1NamespacedPod",
    "method": "put",
    "level": "stable",
    "test_tags": [],
    "tests": [],
    "description": "replace the specified Pod",
    "path": "/api/v1/namespaces/{namespace}/pods/{name}",
    "category": "core",
    "isTested": true,
    "bucket": "460",
    "job": "apisnoop.json",
    "release": "460_apisnoop.json",
    "_id": "6TX2uHYghphBDcTK"
  },
  {
    "name": "watchAppsV1ReplicaSetListForAllNamespaces",
    "method": "watch",
    "level": "stable",
    "test_tags": [],
    "tests": [],
    "description": "watch individual changes to a list of ReplicaSet",
    "path": "/apis/apps/v1/watch/replicasets",
    "category": "apps",
    "isTested": false,
    "bucket": "460",
    "job": "apisnoop.json",
    "release": "460_apisnoop.json",
    "_id": "6TXmbBhhto3nR6aL"
  },
  {
    "name": "replaceRbacAuthorizationV1NamespacedRole",
    "method": "put",
    "level": "stable",
    "test_tags": [],
    "tests": [],
    "description": "replace the specified Role",
    "path": "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/roles/{name}",
    "category": "rbacAuthorization",
    "isTested": false,
    "bucket": "ci-kubernetes-e2e-gce-cos-k8sstable1-default",
    "job": "5403",
    "release": "ci-kubernetes-e2e-gce-cos-k8sstable1-default_5403",
    "_id": "6U00zsfIJN2iWx8m"
  },
  {
    "name": "deleteRbacAuthorizationV1beta1CollectionClusterRole",
    "method": "delete",
    "level": "beta",
    "test_tags": [],
    "tests": [],
    "description": "delete collection of ClusterRole",
    "path": "/apis/rbac.authorization.k8s.io/v1beta1/clusterroles",
    "category": "rbacAuthorization",
    "isTested": false,
    "bucket": "5403",
    "job": "apisnoop.json",
    "release": "5403_apisnoop.json",
    "_id": "6UYsTG00RGrHlIBw"
  },
  {
    "name": "replaceAppsV1NamespacedStatefulSetScale",
    "method": "put",
    "level": "stable",
    "test_tags": [],
    "tests": [],
    "description": "replace scale of the specified StatefulSet",
    "path": "/apis/apps/v1/namespaces/{namespace}/statefulsets/{name}/scale",
    "category": "apps",
    "isTested": false,
    "bucket": "1814",
    "job": "apisnoop.json",
    "release": "1814_apisnoop.json",
    "_id": "6UjQhazV7eZBiuV0"
  },
  {
    "name": "deleteCoreV1Namespace",
    "method": "delete",
    "level": "stable",
    "test_tags": [],
    "tests": [],
    "description": "delete a Namespace",
    "path": "/api/v1/namespaces/{name}",
    "category": "core",
    "isTested": true,
    "bucket": "ci-kubernetes-e2e-gce-cos-k8sstable2-default",
    "job": "1814",
    "release": "ci-kubernetes-e2e-gce-cos-k8sstable2-default_1814",
    "_id": "6UoWrfGEBatUgKCP"
  },
  {
    "name": "createAppsV1NamespacedControllerRevision",
    "method": "post",
    "level": "stable",
    "test_tags": [],
    "tests": [],
    "description": "create a ControllerRevision",
    "path": "/apis/apps/v1/namespaces/{namespace}/controllerrevisions",
    "category": "apps",
    "isTested": true,
    "bucket": "ci-kubernetes-e2e-gci-gce",
    "job": "34681",
    "release": "ci-kubernetes-e2e-gci-gce_34681",
    "_id": "6VPJHeQPP7xsoNPX"
  },
  {
    "name": "getExtensionsAPIGroup",
    "method": "get",
    "level": "stable",
    "test_tags": [],
    "tests": [],
    "description": "get information of a group",
    "path": "/apis/extensions/",
    "category": "extensions",
    "isTested": false,
    "bucket": "5403",
    "job": "apisnoop.json",
    "release": "5403_apisnoop.json",
    "_id": "6VjUQN7V3aHtyPCQ"
  },
  {
    "name": "patchCoreV1PersistentVolumeStatus",
    "method": "patch",
    "level": "stable",
    "test_tags": [],
    "tests": [],
    "description": "partially update status of the specified PersistentVolume",
    "path": "/api/v1/persistentvolumes/{name}/status",
    "category": "core",
    "isTested": false,
    "bucket": "9058",
    "job": "apisnoop.json",
    "release": "9058_apisnoop.json",
    "_id": "6VlvDb11QCtEw9k9"
  },
  {
    "name": "deleteRbacAuthorizationV1alpha1NamespacedRole",
    "method": "delete",
    "level": "alpha",
    "test_tags": [],
    "tests": [],
    "description": "delete a Role",
    "path": "/apis/rbac.authorization.k8s.io/v1alpha1/namespaces/{namespace}/roles/{name}",
    "category": "rbacAuthorization",
    "isTested": false,
    "bucket": "5403",
    "job": "apisnoop.json",
    "release": "5403_apisnoop.json",
    "_id": "6WBfsl532qeWPudy"
  },
  {
    "name": "listCoreV1NamespacedConfigMap",
    "method": "get",
    "level": "stable",
    "test_tags": [
      "[sig-storage]",
      "[Driver: gluster]",
      "[Testpattern: Inline-volume (ext3)]",
      "[Driver: hostPath]",
      "[Testpattern: Dynamic PV (xfs)]",
      "[Testpattern: Dynamic PV (default fs)]",
      "[Driver: azure]",
      "[Driver: hostPathSymlink]",
      "[Testpattern: Inline-volume (xfs)]",
      "[sig-api-machinery]",
      "[Conformance]",
      "[sig-network]",
      "[Driver: emptydir]",
      "[Testpattern: Dynamic PV (ext4)]",
      "[Testpattern: Inline-volume (default fs)]",
      "[Driver: cinder]",
      "[Testpattern: Pre-provisioned PV (default fs)]",
      "[Driver: gcepd]",
      "[k8s.io]",
      "[NodeFeature:Sysctls]",
      "[NodeFeature:FSGroup]",
      "[Testpattern: Inline-volume (ext4)]",
      "[Testpattern: Dynamic PV (ext3)]",
      "[Driver: aws]",
      "[Testpattern: Pre-provisioned PV (ext3)]",
      "[sig-instrumentation]",
      "[sig-cli]",
      "[Driver: vSphere]",
      "[sig-apps]",
      "[NodeConformance]",
      "[Volume type: dir]",
      "[sig-scheduling]",
      "[Volume type: tmpfs]",
      "[Driver: nfs]",
      "[Volume type: blockfswithoutformat]",
      "[Volume type: dir-link]",
      "[Testpattern: Pre-provisioned PV (xfs)]",
      "[Testpattern: Pre-provisioned PV (ext4)]",
      "[StatefulSetBasic]",
      "[Volume type: dir-bindmounted]",
      "[sig-auth]",
      "[NodeFeature:PodReadinessGate]",
      "[Volume type: blockfswithformat]",
      "[sig-node]",
      "[Volume type: dir-link-bindmounted]",
      "[DisabledForLargeClusters]",
      "[sig-autoscaling]",
      "[fast]",
      "[HPA]",
      "[Projection]",
      "[sig-ui]"
    ],
    "tests": [
      "[sig-storage] In-tree Volumes [Driver: gluster] [Testpattern: Inline-volume (ext3)] volumes should be mountable",
      "[sig-storage] In-tree Volumes [Driver: hostPath] [Testpattern: Dynamic PV (xfs)] volumes should be mountable",
      "[sig-storage] In-tree Volumes [Driver: gluster] [Testpattern: Dynamic PV (default fs)] subPath should support existing directory",
      "[sig-storage] In-tree Volumes [Driver: azure] [Testpattern: Dynamic PV (default fs)] volumes should be mountable",
      "[sig-storage] In-tree Volumes [Driver: hostPathSymlink] [Testpattern: Inline-volume (xfs)] volumes should allow exec of files on the volume",
      "[sig-storage] In-tree Volumes [Driver: hostPath] [Testpattern: Dynamic PV (default fs)] volumes should allow exec of files on the volume",
      "[sig-storage] In-tree Volumes [Driver: azure] [Testpattern: Inline-volume (xfs)] volumes should allow exec of files on the volume",
      "[sig-api-machinery] Watchers should be able to restart watching from the last resource version observed by the previous watch [Conformance]",
      "[sig-network] Proxy version v1 should proxy logs on node using proxy subresource  [Conformance]",
      "[sig-storage] In-tree Volumes [Driver: emptydir] [Testpattern: Dynamic PV (ext4)] volumes should be mountable",
      "[sig-network] Services should use same NodePort with same port but different protocols",
      "[sig-storage] In-tree Volumes [Driver: azure] [Testpattern: Inline-volume (default fs)] subPath should support existing single file",
      "[sig-storage] In-tree Volumes [Driver: cinder] [Testpattern: Pre-provisioned PV (default fs)] subPath should support readOnly file specified in the volumeMount",
      "[sig-storage] In-tree Volumes [Driver: gcepd] [Testpattern: Dynamic PV (xfs)] volumes should be mountable",
      "[sig-storage] In-tree Volumes [Driver: hostPathSymlink] [Testpattern: Pre-provisioned PV (default fs)] subPath should support non-existent path",
      "[k8s.io] Sysctls [NodeFeature:Sysctls] should support sysctls",
      "[sig-storage] EmptyDir volumes when FSGroup is specified [NodeFeature:FSGroup] new files should be created with FSGroup ownership when container is non-root",
      "[sig-storage] In-tree Volumes [Driver: emptydir] [Testpattern: Inline-volume (ext4)] volumes should be mountable",
      "[sig-storage] In-tree Volumes [Driver: gluster] [Testpattern: Dynamic PV (ext3)] volumes should be mountable",
      "[sig-storage] In-tree Volumes [Driver: azure] [Testpattern: Pre-provisioned PV (default fs)] subPath should support readOnly file specified in the volumeMount",
      "[sig-storage] In-tree Volumes [Driver: gluster] [Testpattern: Dynamic PV (ext4)] volumes should be mountable",
      "[sig-storage] In-tree Volumes [Driver: hostPathSymlink] [Testpattern: Inline-volume (ext3)] volumes should be mountable",
      "[sig-storage] In-tree Volumes [Driver: aws] [Testpattern: Inline-volume (default fs)] subPath should support existing directory",
      "[sig-storage] In-tree Volumes [Driver: cinder] [Testpattern: Inline-volume (default fs)] subPath should support existing directories when readOnly specified in the volumeSource",
      "[sig-storage] In-tree Volumes [Driver: hostPath] [Testpattern: Pre-provisioned PV (ext3)] volumes should be mountable",
      "[sig-instrumentation] Cadvisor should be healthy on every node.",
      "[sig-cli] Kubectl client [k8s.io] Kubectl apply should apply a new configuration to an existing RC",
      "[sig-storage] In-tree Volumes [Driver: hostPath] [Testpattern: Inline-volume (default fs)] subPath should support non-existent path",
      "[sig-storage] In-tree Volumes [Driver: vSphere] [Testpattern: Pre-provisioned PV (default fs)] subPath should support existing directories when readOnly specified in the volumeSource",
      "[sig-storage] In-tree Volumes [Driver: hostPathSymlink] [Testpattern: Inline-volume (default fs)] subPath should support non-existent path"
    ],
    "description": "list or watch objects of kind ConfigMap",
    "path": "/api/v1/namespaces/{namespace}/configmaps",
    "category": "core",
    "isTested": true,
    "bucket": "5403",
    "job": "apisnoop.json",
    "release": "5403_apisnoop.json",
    "_id": "6WOdirbKnu0yOuXx"
  }
]
